# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2015-2023, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Provides tests for high-dimensional triangulations.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

def product1(triClass, dim, permClass):
    tri = triClass()
    s = tri.newSimplex()
    s.join(dim, s, permClass(list(range(1, dim+1)) + [0]))
    return tri

def product2(triClass, dim, permClass):
    tri = triClass()
    s = tri.newSimplex()
    t = tri.newSimplex()
    s.join(dim, t, permClass(list(range(1, dim+1)) + [0]))
    t.join(dim, s, permClass(list(range(1, dim+1)) + [0]))
    return tri

def dump(tri, name):
    print('Triangulation:', name)
    print()
    print('Connected:', tri.isConnected())
    print('Orientable:', tri.isOrientable())
    print('Oriented:', tri.isOrientable())
    print('Boundary facets:', tri.countBoundaryFacets())
    print()
    print(tri.detail())

def testDim(triClass, dim, permClass):
    dump(product1(triClass, dim, permClass), str(dim) + '-D product #1')
    dump(product2(triClass, dim, permClass), str(dim) + '-D product #2')

#testDim(Triangulation2, 2, Perm3)
#testDim(Triangulation3, 3, Perm4)
#testDim(Triangulation4, 4, Perm5)
testDim(Triangulation5, 5, Perm6)
testDim(Triangulation6, 6, Perm7)
testDim(Triangulation7, 7, Perm8)
testDim(Triangulation8, 8, Perm9)
#testDim(Triangulation9, 9, Perm10)
#testDim(Triangulation10, 10, Perm11)
#testDim(Triangulation11, 11, Perm12)
#testDim(Triangulation12, 12, Perm13)
#testDim(Triangulation13, 13, Perm14)
#testDim(Triangulation14, 14, Perm15)
#testDim(Triangulation15, 15, Perm16)

