# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2023-2025, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Tests flags and flag sets.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

def evalObj(x):
	if x:
		print(x, '-> True')
	else:
		print(x, '-> False')

def evalFlag(x):
	# Evaluate as a raw enum value:
	evalObj(x)
	
	# Evaluate as a rich flags object:
	evalObj(x | x)

evalFlag(regina.CensusPurge.Nil)
evalFlag(regina.CensusPurge.NonMinimal)

evalFlag(regina.AngleAlg.Default)
evalFlag(regina.AngleAlg.Tree)

evalFlag(regina.HyperList.Default)
evalFlag(regina.HyperList.Vertex)

evalFlag(regina.HyperAlg.Default)
evalFlag(regina.HyperAlg.VertexDD)

evalFlag(regina.NormalList.Default)
evalFlag(regina.NormalList.Fundamental)

evalFlag(regina.NormalAlg.Default)
evalFlag(regina.NormalAlg.VertexTree)

evalFlag(regina.SurfaceExport.Nil)
evalFlag(regina.SurfaceExport.Name)

# Some enum types that are NOT intended to be used as flags:

evalObj(regina.NormalCoords.Standard)            # value is zero
evalObj(regina.NormalCoords.Quad)                # value is non-zero
evalObj(regina.Triangle3.Type.Unknown)           # value is zero
evalObj(regina.Triangle3.Type.Parachute)         # value is non-zero

# Verify that boolean combinations of flags are behaving as expected:

t = Example3.lst(3,4)
print(NormalSurfaces(t, NormalCoords.Standard))
print(NormalSurfaces(t, NormalCoords.Standard, NormalList.Default))
print(NormalSurfaces(t, NormalCoords.Standard, NormalList.Vertex))
print(NormalSurfaces(t, NormalCoords.Standard, NormalList.Fundamental))
print(NormalSurfaces(t, NormalCoords.Standard, NormalList.Vertex | NormalList.ImmersedSingular))
print(NormalSurfaces(t, NormalCoords.Standard, NormalList.Fundamental | NormalList.ImmersedSingular))
