# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2007-2021, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Provides detailed tests for UTF-8 representations of various objects.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

g = AbelianGroup(3)
print(g)
print(g.str())
print(g.utf8())
print(g.detail())
g.addTorsion(17)
print(g)
print(g.str())
print(g.utf8())
print(g.detail())

m = MatrixInt(2, 2)
n = MatrixInt(2, 2)
g = MarkedAbelianGroup(m, n)
print(g)
print(g.str())
print(g.utf8())
print(g.detail())
n.set(0, 0, 23)
g = MarkedAbelianGroup(m, n)
print(g)
print(g.str())
print(g.utf8())
print(g.detail())

p = Polynomial()
p[3] = -1
p[1] = 4
p[0] = -2
p
print(p)
print(p.str())
print(p.str('z'))
print(p.utf8())
print(p.utf8('z'))

p = Cyclotomic(7)
p[4] = 3
p[1] = -1
p
print(p)
print(p.str())
print(p.str('z'))
print(p.utf8())
print(p.utf8('z'))

p = Laurent(4)
p[-3] = 2
p
print(p)
print(p.str())
print(p.str('z'))
print(p.utf8())
print(p.utf8('z'))

p = Laurent2(-1, 2)
p[0, -3] = 4
p
print(p)
print(p.str())
print(p.str('z'))
print(p.str('z', 'w'))
print(p.utf8())
print(p.utf8('z'))
print(p.utf8('z', 'w'))
