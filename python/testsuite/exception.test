# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2015-2023, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Tests throwing and catching Regina's exception types.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

t = Example3.poincare()

print(t.faces(2).size())
try:
    print(t.faces(3).size())
    print('ERROR: Did not throw exception')
except InvalidArgument:
    pass

try:
    print(t.faces(-1).size())
    print('ERROR: Did not throw exception')
except InvalidArgument:
    pass

t = ExampleSnapPea.whiteheadLink()
try:
    print(t.filledAll())
    print('ERROR: Did not throw exception')
except FailedPrecondition:
    pass

dummy = t.fill(1,2,0)
dummy = t.fill(3,4,1)
print(t.filledAll().homology())
dummy = t.pachner(t.triangle(0))
try:
    print(t.filledAll())
    print('ERROR: Did not throw exception')
except SnapPeaIsNull:
    pass

print(Rational(1,2).doubleApprox())
try:
    print(Rational(1,0).doubleApprox())
    print('ERROR: Did not throw exception')
except UnsolvedCase:
    pass

s = SFSpace()
print(s.construct().homology())
s.addPuncture()
try:
    print(s.construct())
    print('ERROR: Did not throw exception')
except NotImplemented:
    pass

t = Example3.poincare()
s = NormalSurfaces(t, NS_STANDARD)
t = None
print(s)
try:
    t = s.triangulation()
    print(t.isReadOnlySnapshot())
    # TODO: subdivide(), due to a swap() in its internal implementation,
    # actually throws a SnapshotWriteError from a triangulation destructor.
    # This is *bad*, and moreover results in an exception that Python cannot
    # catch.
    # t.subdivide()
    t.pachner(t.triangle(0))
    print('ERROR: Did not throw exception')
except SnapshotWriteError:
    pass

print('All done!')

