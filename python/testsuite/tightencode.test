# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2015-2021, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Tests the tightEncode() functions.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

from __future__ import print_function

def doLong(val):
	enc = tightEncoding(val)
	print(enc)
	for i in [ tightEncoding(Integer(val)), tightEncoding(LargeInteger(val)),
			Integer(val).tightEncoding(), LargeInteger(val).tightEncoding() ]:
		if i != enc:
			print("ERROR: Inconsistent encodings")

def doLarge(val):
	enc = tightEncoding(Integer(val))
	print(enc)
	for i in [ tightEncoding(Integer(val)), tightEncoding(LargeInteger(val)),
			Integer(val).tightEncoding(), LargeInteger(val).tightEncoding() ]:
		if i != enc:
			print("ERROR: Inconsistent encodings")

def doUnsigned(val):
	# We can test encodings for unsigned types via AbelianGroup,
	# which stores the rank as an unsigned integer.
	a = AbelianGroup(val)
	print(a.tightEncoding())

doLong(0)
doLong(-44)
doLong(45)

doLong(-89)
doLong(-45)
doLong(46)
doLong(90)

doLong(-4139)
doLong(-90)
doLong(91)
doLong(4140)

doLong(-368639)
doLong(-4140)
doLong(4141)
doLong(368640)

doLong(-368684)
doLong(-368640)
doLong(368641)
doLong(368684)

doLong(-368729)
doLong(-368685)
doLong(368685)
doLong(368729)

doLarge('1000000000000000000000000000000000000000')
doLarge('-1000000000000000000000000000000000000000')

print(tightEncoding(LargeInteger.infinity))
print(LargeInteger.infinity.tightEncoding())

doUnsigned(0)
doUnsigned(1)
doUnsigned(45)
doUnsigned(46)
doUnsigned(90)
doUnsigned(91)
doUnsigned(4140)
doUnsigned(4141)
doUnsigned(368640)
doUnsigned(368641)
doUnsigned(368684)
doUnsigned(368685)
doUnsigned(368729)

