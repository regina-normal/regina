# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2015-2021, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Tests Regina's vertex enumeration functions.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

from __future__ import print_function

ans = None
def store(vec):
    global ans
    ans.append(vec)

def dump():
    global ans
    ans.sort(key = str)
    for v in ans:
        print(v)
    print()

tri = Example3.lens(3, 1)
n = tri.size()
m = makeMatchingEquations(tri, NS_STANDARD)

# Build a looser set of validity constraints, that give more solutions.
c = ValidityConstraints(7, n)
c.addLocal([4,5]) # Missing coordinate 6

ans = DoubleDescription.enumerate(m, c)
dump()

ans = []
DoubleDescription.enumerate(store, m, c)
dump()

ans = HilbertDual.enumerate(m, c)
dump()

ans = []
HilbertDual.enumerate(store, m, c)
dump()

ans = HilbertCD.enumerate(m, c)
dump()

ans = []
HilbertCD.enumerate(store, m, c)
dump()

rays = DoubleDescription.enumerate(m, c)

ans = HilbertPrimal.enumerate(rays, c)
dump()

ans = []
HilbertPrimal.enumerate(store, rays, c)
dump()
