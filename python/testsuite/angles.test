# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2007-2023, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Provides various tests for angle structure enumeration.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

def dumpAngles(name, tri, triName, tautOnly = False):
	try:
		slist = regina.AngleStructures(tri, tautOnly)
	except:
		print("-------------------------------")
		print(name)
		print('ENUMERATION FAILED')
		print("-------------------------------")
		print()
		return
	
	print("-------------------------------")
	print(triName)
	print(name)
	print("-------------------------------")
	print()
	
	# Dump the angle structures in sort order, since we don't really mind if
	# the ordering changes between releases.
	structures = slist.detail().split('\n')
	structures.sort()
	# Let the text headers appear up top.
	structures.reverse()
	for s in structures:
		print(s)
	
	# Nothing else to say.
	print()

def angleStats(tri, triName):
	dumpAngles('Vertex angle structures', tri, triName, False)
	dumpAngles('Taut angle structures', tri, triName, True)

t = regina.Triangulation3()
angleStats(t, 'Empty triangulation')

angleStats(regina.Example3.figureEight(), 'Figure eight knot complement')
angleStats(regina.Example3.whiteheadLink(), 'Whitehead link complement')
angleStats(regina.Example3.poincare(), 'Poincare homology sphere')
