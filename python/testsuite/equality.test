# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2015-2021, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Tests that == and != behave as expected for Regina's python bindings.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

from __future__ import print_function

print(AbelianGroup.equalityType)
print(GluingPermSearcher2.equalityType)
print(Integer.equalityType)
print(SigCensus.equalityType)

print()

def cmp(name, a, b, packet = False):
	ans = ''
	try:
		if a == b:
			ans += '=='
		else:
			ans += 'not =='
	except:
		ans += 'throws on =='
	ans += ', '
	try:
		if a != b:
			ans += '!='
		else:
			ans += 'not !='
	except:
		ans += 'throws on !='
	if packet:
		ans += ', '
		try:
			if a.samePacket(b):
				ans += 'same packet'
			else:
				ans += 'different packets'
		except:
			ans += 'throws on samePacket()'
	print(name, ':', ans)

# Test == and != for objects that are equal by value but have different
# underlying C++ pointers.
# The behaviour should be different for different classes.

# Classes that compare by value:

cmp('Integer', Integer(3), Integer(3))
cmp('Integer', Integer(3), Integer(4))

cmp('AbelianGroup', AbelianGroup(), AbelianGroup())
cmp('AbelianGroup', AbelianGroup(), AbelianGroup(1))

cmp('GroupPresentation', GroupPresentation(), GroupPresentation())
cmp('GroupPresentation', GroupPresentation(), GroupPresentation(1))

cmp('Link', ExampleLink.trefoil(), ExampleLink.trefoilRight())
cmp('Link', ExampleLink.trefoilLeft(), ExampleLink.trefoilRight())
cmp('Link', Link(3), Link(3))
cmp('Link', Link(3), Link(2))
cmp('Link + Packet', Link(2), PacketOfLink(2), True)
cmp('Link + Packet', PacketOfLink(2), Link(2), True)
cmp('PacketOfLink', PacketOfLink(2), PacketOfLink(2), True)
p = PacketOfLink(3)
cmp('PacketOfLink', p, p.root(), True)

cmp('Triangulation3', Triangulation3(), Triangulation3())
cmp('Triangulation3', Example3.figureEight(), Example3.whiteheadLink())
cmp('Triangulation3 + Packet', Triangulation3(), PacketOfTriangulation3(), True)
cmp('Triangulation3 + Packet', PacketOfTriangulation3(), Triangulation3(), True)
cmp('PacketOfTriangulation3', PacketOfTriangulation3(), PacketOfTriangulation3(), True)
p = PacketOfTriangulation3()
cmp('PacketOfTriangulation3', p, p.root(), True)

cmp('FacetPairing2', FacetPairing2(Example2.kb()), FacetPairing2(Example2.kb()))
cmp('FacetPairing2', FacetPairing2(Example2.mobius()), FacetPairing2(Example2.annulus()))

cmp('Attachment', Attachment(b'foo', 'x'), Attachment(b'foo', 'y'), True)
cmp('Attachment', Attachment(b'foo', 'x'), Attachment(), True)
cmp('Attachment', Attachment(), Attachment(b'foo', 'x'), True)
cmp('Attachment', Attachment(b'foof', 'x'), Attachment(b'foo', 'x'), True)
cmp('Text', Text('foo'), Text('foo'), True)
cmp('Text', Text('foo'), Text('foof'), True)

x = None

def foundGluings2(g):
	global x
	if not x:
		x = GluingPerms2(g)
	cmp('GluingPerms2', x, g)

def foundPairing2(p, isos):
	GluingPermSearcher2.findAllPerms(p, isos, True, foundGluings2)

FacetPairing2.findAllPairings(2, False, 0, foundPairing2)

# Classes that compare by reference:

t = Triangulation3()
(a,b) = t.newTetrahedra(2)
cmp('Tetrahedron3', a, t.tetrahedron(0))
cmp('Tetrahedron3', a, t.tetrahedron(1))

# More tests with packets:

a = Container()
cmp('Packet', a, a.root(), True)
cmp('Different Packets', Container(), Text(), True)
cmp('Different Packets', PacketOfLink(), Text(), True)
cmp('Different Packets', Text(), PacketOfLink(), True)
cmp('Different Packets', Text(), Link(), True)
cmp('Different Packets', Link(), Text(), True)

t = Example3.poincare()
st = NormalSurfaces.enumerate(t, NS_QUAD)
dt = DiscSetSurface(st.surface(0))
u = Example3.s2xs1()
su = NormalSurfaces.enumerate(u, NS_QUAD)
du = DiscSetSurface(su.surface(0))
cmp('DiscSetTet', du.tetDiscs(0), du.tetDiscs(1)) # should be equal
cmp('DiscSetTet', dt.tetDiscs(0), dt.tetDiscs(1)) # should be different
cmp('DiscSetSurface', dt, DiscSetSurface(st.surface(0)))
cmp('DiscSetSurface', dt, DiscSetSurface(st.surface(1)))
cmp('DiscSetSurface', dt, du)

# Classes that cannot be compared:

t = Example3.poincare()
cmp('HomologicalData', HomologicalData(t), HomologicalData(t))
