# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2007-2021, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Provides various tests for marked abelian groups.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

from __future__ import print_function

def makeMatrix(rows, cols, values):
	m = regina.MatrixInt(rows, cols)
	m.initialise(values)
	return m

def makeGroup(rowsM, colsM, valuesM, rowsN, colsN, valuesN):
	return regina.MarkedAbelianGroup(
		makeMatrix(rowsM, colsM, valuesM),
		makeMatrix(rowsN, colsN, valuesN))

def makeHom(domain, codomain, rows, cols, values):
	return regina.HomMarkedAbelianGroup(
		domain, codomain, makeMatrix(rows, cols, values))

def groupStats(g):
	print("------------------------")
	print("New marked abelian group")
	print("------------------------")
	print()
	print('Group:', g)

	print('Free generators:')
	for i in range(g.rank()):
		print(str(i) + ':', g.freeRep(i))
	print('Torsion generators:')
	for i in range(g.countInvariantFactors()):
		print(str(i) + ':', g.torsionRep(i))

	# Nothing else to say.
	print()

def homStats(h):
	print("----------------")
	print("New homomorphism")
	print("----------------")
	print()
	print(h.detail())


# Z + Z_6:
g1 = makeGroup(1, 5, [1,1,1,1,1],
	5, 3, [2,2,6,-2,0,0,0,-1,-3,0,-1,0,0,0,-3])
groupStats(g1)

# 2 Z + 2 Z_2:
g2 = makeGroup(1, 5, [1,1,1,1,1],
	5, 2, [2,-6,-2,0,0,2,0,2,0,2])
groupStats(g2)

# Hom: g2 -> g1, kernel Z + Z_2, cokernel Z_5:
homStats(makeHom(g2, g1,
	5, 5, [5,5,11,0,7,0,0,1,0,2,0,0,-1,0,-2,0,0,0,0,0,0,0,-6,5,-2]))

# Hom: g2 -> g1, kernel Z + Z_2, cokernel Z_15:
homStats(makeHom(g2, g1,
	5, 5, [10,10,38,0,-5,0,0,3,0,0,0,0,-3,0,0,0,0,0,0,0,0,0,-28,10,15]))

# Hom: g2 -> g1, kernel 2 Z + Z_2, cokernel Z:
homStats(makeHom(g2, g1,
	5, 5, [-3,0,0,-1,1,-3,0,0,-1,1,3,0,0,1,-1,0,0,0,0,0,3,0,0,1,-1]))

# Some playing with snfRep():
print("------------------------------------")
print("Miscellaneous vector representations")
print("------------------------------------")
print()

try:
	print(g1.snfRep([-6,0,0,0,5]))
except InvalidArgument as e:
	print('Not in kernel')
print(g1.snfRep([-6,0,0,0,6]))
print(g1.snfRep([-4,2,-2,0,4]))
print(g1.snfRep([-8,-2,2,0,8]))
print(g1.snfRep([0,6,-6,0,0]))

try:
	print(g2.snfRep([0,-3,-1,3,0]))
except InvalidArgument as e:
	print('Not in kernel')
print(g2.snfRep([0,-3,-1,3,1]))
print(g2.snfRep([-3,0,-1,3,1]))

