# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2015-2021, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Tests the behaviour of the packet cloning functions.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

from __future__ import print_function

root = Container()

# Note: Since Regina 7.0, when cloning a packet tree, the cloned surface
# lists point to the *original* triangulations.

# 3-D surface test:

tri = PacketOfTriangulation3(Example3.poincare())
list = PacketOfNormalSurfaces(tri, NS_STANDARD)
tri.insertChildLast(list)
root.insertChildLast(tri)

tri2 = tri.cloneAsSibling(True)
list2 = tri2.firstChild()

s = list.surface(0)
s2 = list2.surface(0)

print(tri.samePacket(list.triangulation().packet()))
print(tri.samePacket(list2.triangulation().packet()))
print(not tri2.samePacket(list2.triangulation().packet()))

print(tri.samePacket(s.triangulation().packet()))
print(tri.samePacket(s2.triangulation().packet()))
print(not tri2.samePacket(s2.triangulation().packet()))

# 4-D hypersurface test:

tri = PacketOfTriangulation4(Example4.s3xs1())
list = PacketOfNormalHypersurfaces(tri, HS_STANDARD)
tri.insertChildLast(list)
root.insertChildLast(tri)

tri2 = tri.cloneAsSibling(True)
list2 = tri2.firstChild()

s = list.hypersurface(0)
s2 = list2.hypersurface(0)

print(tri.samePacket(list.triangulation().packet()))
print(tri.samePacket(list2.triangulation().packet()))
print(not tri2.samePacket(list2.triangulation().packet()))

print(tri.samePacket(s.triangulation().packet()))
print(tri.samePacket(s2.triangulation().packet()))
print(not tri2.samePacket(s2.triangulation().packet()))

# Angle structure test:

tri = PacketOfTriangulation3(Example3.whiteheadLink())
list = PacketOfAngleStructures(tri)
tri.insertChildLast(list)
root.insertChildLast(tri)

tri2 = tri.cloneAsSibling(True)
list2 = tri2.firstChild()

s = list.structure(0)
s2 = list2.structure(0)

print(tri.samePacket(list.triangulation().packet()))
print(tri.samePacket(list2.triangulation().packet()))
print(not tri2.samePacket(list2.triangulation().packet()))

print(tri.samePacket(s.triangulation().packet()))
print(tri.samePacket(s2.triangulation().packet()))
print(not tri2.samePacket(s2.triangulation().packet()))

