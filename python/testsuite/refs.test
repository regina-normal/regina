# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2007-2021, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Provides tests for passing by value vs reference.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

from __future__ import print_function

v = VectorInt([1,2,3,4])
print(v)
v[2].negate()
print(v)
v[3] = 5
print(v)
print()

v = VectorLarge([1,2,3,4])
print(v)
v[2].makeInfinite()
print(v)
v[3] = 5
print(v)
print()

m = MatrixInt([[1,2], [3,4]])
print(m.detail())
m.entry(0,1).negate()
print(m.detail())
# The following line does not even compile:
# m.entry(1,1) = 3 # should not work
m.set(1,1,5)
print(m.detail())

p = Polynomial([2,3,4,5])
print(p)
p.leading().negate() # should do nothing due to constness
print(p)
p[2].negate() # should do nothing due to constness
print(p)
p[1] = 7; # should work
print(p)
print()

p = Laurent(-1, [2,3,4,5])
print(p)
p[1].negate() # should do nothing due to constness
print(p)
p[1] = 7; # should work
print(p)
print()

p = Laurent2(2,3)
print(p)
p[2,3].negate() # should do nothing due to constness
print(p)
p[2,3] = 7; # should work
print(p)
print()

p = Cyclotomic(3, [2, 5])
print(p)
p[1] = 4
print(p)
p[1].negate()
print(p)
print()

g = Example3.poincare().fundamentalGroup()

print(g.relation(0))
g.relation(0).term(0).exponent = 2
print(g.relation(0))
g.relation(0).terms()[0].exponent = 3
print(g.relation(0))
g.relations()[0].term(0).exponent = 4
print(g.relation(0))
g.relations()[0].terms()[0].exponent = 5
print(g.relation(0))
print()

r = g.relations()[0]
print(r)
g.relation(0).term(0).exponent = 6
print(r)
r = None
print()

t = g.relation(0).terms()[0]
print(t)
g.relation(0).term(0).exponent = 7
print(t)
print()

n = NormalSurfaces(Example3.figureEight(), NS_QUAD)
for s in n:
	s.setName('foo')
for s in n:
	print(s.name())
print()

