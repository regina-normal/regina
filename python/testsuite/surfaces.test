# Regina - A Normal Surface Theory Calculator
# Python Test Suite Component
#
# Copyright (c) 2007-2021, Ben Burton
# For further details contact Ben Burton (bab@debian.org).
#
# Provides various tests for normal surface enumeration.
#
# This file is a single component of Regina's python test suite.  To run
# the python test suite, move to the main python directory in the source
# tree and run "make check".
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# As an exception, when this program is distributed through (i) the
# App Store by Apple Inc.; (ii) the Mac App Store by Apple Inc.; or
# (iii) Google Play by Google Inc., then that store may impose any
# digital rights management, device limits and/or redistribution
# restrictions that are required by its terms of service.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

from __future__ import print_function

def dumpSurfaces(name, tri, triName, coords = regina.NS_STANDARD, which = regina.NS_LIST_DEFAULT):
	try:
		slist = regina.NormalSurfaces(tri, coords, which)
	except:
		print("-------------------------------")
		print(name)
		print('ENUMERATION FAILED')
		print("-------------------------------")
		print()
		return

	print("-------------------------------")
	print(triName)
	print(name)
	print("-------------------------------")
	print()

	# Dump the surfaces in sort order, since we don't really mind if the
	# ordering changes between releases.
	surfaces = slist.detail().split('\n')
	surfaces.sort()
	# Let the text headers appear up top.
	surfaces.reverse()
	for s in surfaces:
		print(s)

	# Nothing else to say.
	print()

def surfaceStats(tri, triName):
	dumpSurfaces('Vertex surfaces (std)',
		tri, triName, regina.NS_STANDARD)
	dumpSurfaces('Vertex surfaces (quad)',
		tri, triName, regina.NS_QUAD)
	dumpSurfaces('Vertex surfaces (std almost normal)',
		tri, triName, regina.NS_AN_STANDARD)
	dumpSurfaces('Vertex surfaces (quad-oct almost normal)',
		tri, triName, regina.NS_AN_QUAD_OCT)
	dumpSurfaces('Vertex surfaces (closed quad)',
		tri, triName, regina.NS_QUAD_CLOSED)
	dumpSurfaces('Vertex surfaces (closed quad-oct)',
		tri, triName, regina.NS_AN_QUAD_OCT_CLOSED)
	dumpSurfaces('Fundamental surfaces (std)',
		tri, triName, regina.NS_STANDARD, regina.NS_FUNDAMENTAL)
	dumpSurfaces('Fundamental surfaces (quad)',
		tri, triName, regina.NS_QUAD, regina.NS_FUNDAMENTAL)
	dumpSurfaces('Fundamental surfaces (std almost normal)',
		tri, triName, regina.NS_AN_STANDARD, regina.NS_FUNDAMENTAL)
	dumpSurfaces('Fundamental surfaces (quad-oct almost normal)',
		tri, triName, regina.NS_AN_QUAD_OCT, regina.NS_FUNDAMENTAL)
	dumpSurfaces('Fundamental surfaces (closed quad)',
		tri, triName, regina.NS_QUAD_CLOSED, regina.NS_FUNDAMENTAL)
	dumpSurfaces('Fundamental surfaces (closed quad-oct)',
		tri, triName, regina.NS_AN_QUAD_OCT_CLOSED, regina.NS_FUNDAMENTAL)

# Start with the tables of constants for disc types.
print(quadSeparating)
print(quadMeeting)
print(quadDefn)
print(quadPartner)
print(quadString)
print(triDiscArcs)
print(quadDiscArcs)
print(octDiscArcs)
print()

t = regina.Triangulation3()
surfaceStats(t, 'Empty triangulation')

surfaceStats(regina.Example3.threeSphere(), '3-sphere')
surfaceStats(regina.Example3.s2xs1(), 'S2 x S1')
surfaceStats(regina.Example3.rp2xs1(), 'RP2 x S1')
surfaceStats(regina.Example3.rp3rp3(), 'RP3 # RP3')
surfaceStats(regina.Example3.lens(8,3), 'L(8,3)')
surfaceStats(regina.Example3.poincare(), 'Poincare homology sphere')
surfaceStats(regina.Example3.lst(3,4), 'LST(3,4,7)')
surfaceStats(regina.Example3.solidKleinBottle(), 'Solid Klein bottle')
surfaceStats(regina.Example3.figureEight(), 'Figure eight knot complement')
surfaceStats(regina.Example3.whiteheadLink(), 'Whitehead link complement')
surfaceStats(regina.Example3.gieseking(), 'Gieseking manifold')
surfaceStats(regina.Example3.trefoil(), 'Trefoil knot complement')
