
<!-- Regina data file format documentation.
     See ../regina.sgml for further details. -->

<refentry id="data-packet-script">
 <refmeta>
  <refentrytitle>packet (script)</refentrytitle>
  <manvolnum>5reg</manvolnum>
 </refmeta>

 <refnamediv>
  <refname>packet (script)</refname>
  <refpurpose>Replaced by &xml-script;</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <informaltable frame="all">
   <tgroup cols="2">
    <colspec colname="c1"/>
    <colspec colname="c2"/>
    <tbody>
     <row><entry namest="c1" nameend="c2">
      <emphasis role="bold">Content Model</emphasis>
     </entry></row>
     <row><entry namest="c1" nameend="c2">
<synopsis>
packet ::= (&xml-var;*, &xml-text;,
            &xml-tag;*, &xml-packet;*)</synopsis>
     </entry></row>
     <row><entry namest="c1" nameend="c2">
      <emphasis role="bold">Attributes</emphasis>
     </entry></row>
     <row><entry namest="c1" nameend="c2">
      See the general &xml-packet; element documentation.
     </entry></row>
    </tbody>
   </tgroup>
  </informaltable>
  <para>&eltdepver;7.0</para>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>
  <para>
   In &regina;&nbsp;6.0.1 and earlier, the &xml-packet; element was used
   to store every packet in the entire packet tree that makes up a
   &regina; data file.
   This page describes how the &xml-packet; element was structured when
   storing a script packet.
   Since &regina;&nbsp;7.0, each packet type has its own &xml; element;
   in particular, script packets are now stored using the &xml-script; element.
  </para>
  <para>
   A <emphasis>script</emphasis> packet stores a &python; script offering direct
   low-level access to the &regina; calculation engine.
  </para>
  <para>
   A script may contain variables representing other packets in the same
   packet tree; these are described by the child &xml-var; elements.
  </para>
  <para>
   The way the &python; code is stored has changed over time:
   <itemizedlist>
    <listitem><para>
     Between &regina;&nbsp;4.96 and &regina;&nbsp;6.0.1, the &python; code
     was stored as a single &xml-text; element.
    </para></listitem>
    <listitem><para>
     In &regina;&nbsp;4.95 and earlier, the &python; code was stored
     line-by-line using a sequence of &xml-line; elements.
    </para></listitem>
   </itemizedlist>
   Both storage methods are still recognised by &regina; when reading
   old second-generation data files.
  </para>
  <para>
   If you are writing a second-generation data file that must be read by
   very old versions of &regina; (dating back to &regina;&nbsp;4.95),
   then you may write the script twice:
   first as a series of &xml-line; elements, and then again as a single
   &xml-text; element.
   However, the &xml-line; elements <emphasis>must</emphasis> come
   first, since when &regina; reads a file it will append each &xml-line;
   to the script, whereas if it sees a &xml-text; element
   it will replace the script entirely.
   Therefore, if the &xml-line; elements appear
   <emphasis>after</emphasis> the &xml-text; element,
   &regina; will effectively build two copies of the script end-on-end.
  </para>
  <para>
   The roles played by the child &xml-tag; and &xml-packet; elements are
   described in the general &xml-packet; element documentation.
  </para>

  <refsect2>
   <title>Parents</title>
   <para>
    The following elements contain <sgmltag>packet</sgmltag>:
    <simplelist type="inline">
     <member>&xml-packet;</member>
     <member>&xml-reginadata;</member>
    </simplelist>.
   </para>
  </refsect2>

  <refsect2>
   <title>Children</title>
   <para>
    The following elements occur in <sgmltag>packet</sgmltag> for
    a script packet:
    <simplelist type="inline">
     <member>&xml-packet;</member>
     <member>&xml-tag;</member>
     <member>&xml-text;</member>
     <member>&xml-var;</member>
    </simplelist>.
   </para>
  </refsect2>
 </refsect1>
</refentry>
