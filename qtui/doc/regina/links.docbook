<chapter id="links">
 <title>Knots and Links</title>

 <para>
  &regina; offers native support for knots and links.
  &regina; collectively refers to all such objects as
  <firstterm>links</firstterm>:
  a link may have multiple components, or just one component
  (i.e., a knot), or zero components (i.e., the empty link).
 </para>
 <para>
  A link is stored using a <firstterm>link diagram</firstterm>,
  which consists of <replaceable>n</replaceable> crossings and
  2<replaceable>n</replaceable> strands that connect them, possibly
  with some additional unknot components that have no crossings at all.
 </para>
 <para>
  &regina; supports both classical and virtual link diagrams:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    <firstterm>Classical</firstterm> link diagrams are the typical planar
    diagrams that one encounters when first studing knot theory.
    These describe links in the 3-sphere, and such links are
    considered to be equivalent under ambient isotopy.
   </para>
   <para>
    Although classical link diagrams are planar, &regina; considers these
    diagrams to be embedded in the &s2; (not the plane).
    In particular, &regina; does not keep track of which cell is the
    &ldquo;outer&rdquo; cell of the diagram.
   </para>
  </listitem>
  <listitem>
   <para>
    <firstterm>Virtual</firstterm> link diagrams remove the requirement for
    the diagram to be planar.  Instead a virtual link diagram may be embedded
    in some arbitrary orientable surface <replaceable>S</replaceable>.
    This describes a link in the thickened surface
    <replaceable>S</replaceable>&nbsp;&times;&nbsp;I, and such links are
    considered to be equivalent under ambient isotopy, orientation-preserving
    homeomorphisms of <replaceable>S</replaceable>, and the addition and/or
    removal of empty handles from <replaceable>S</replaceable>.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  Links in &regina; are <firstterm>oriented</firstterm>.
  This means that &regina; keeps track of a &ldquo;direction of
  travel&rdquo; around each component of the link.
  &regina; also maintains an orientation of the surface containing the link
  diagram (i.e., &s2; for a classical diagram, or the orientable surface
  <replaceable>S</replaceable> for a virtual diagram), which means there is a
  well-defined notion of left versus right, and positive versus negative
  crossings.
 </para>

 <sect1 id="link-creation">
  <title>Creation</title>

  <para>
   The easiest way to create a new link is via the
   <menuchoice>
    <guimenu>Packet Tree</guimenu>
    <guimenuitem>New Knot or Link</guimenuitem>
   </menuchoice>
   menu item (or the corresponding toolbar button).
  </para>
  <para>
   <inlinemediaobject>
    <imageobject>
     <imagedata multires="menu-newlink"/>
    </imageobject>
   </inlinemediaobject>
  </para>
  <para>
   You will be asked what <emphasis>type</emphasis> of link
   to create (see the drop-down box below).
   Here we walk through the various options.
  </para>
  <para>
   <inlinemediaobject>
    <imageobject>
     <imagedata multires="newlink"/>
    </imageobject>
   </inlinemediaobject>
  </para>

  <sect2 id="link-new-example">
   <title>Example Knots and Links</title>

   <para>
    Like triangulations,
    &regina; offers a selection of ready-made sample knots and links
    which you can use to experiment with &regina;.
    Simply select an example from the list provided and &regina; will
    build the corresponding link for you.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="newlink-example"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <tip id="link-census-examples"><para>
    You can see many more examples by looking through the prime knot census,
    which is shipped as one of &regina;'s example data files.
    Select
    <menuchoice>
     <guimenu>File</guimenu>
     <guisubmenu>Open Example</guisubmenu>
     <guimenuitem>Prime Knots</guimenuitem>
    </menuchoice>
    from the menu.
   </para></tip>
  </sect2>

  <sect2 id="link-new-code">
   <title>Text Codes</title>

   <para>
    This will reconstruct a link diagram from one of several common text codes.
   </para>
   <para>
    Be aware: some types of codes only support single-component knots
    (not multiple-component links), and some types of codes only support
    classical link diagrams (not virtual link diagrams) &ndash; see below
    for details.
    If you need all of these features (multiple components and/or virtual
    diagrams), then good choices are
    <link linkend="link-new-knotsig">knot/link signatures</link> or
    <link linkend="link-new-pd">planar diagram codes</link>.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="newlink-code"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    The codes that &regina; understands include:
    <itemizedlist>
     <listitem id="link-new-knotsig">
      <para>&regina;'s own <firstterm>knot/link signatures</firstterm>:
       These are compact sequences of letters, digits and/or punctuation
       that uniquely identify a link diagram up to combinatorial isomorphism.
       Here <firstterm>combinatorial isomorphism</firstterm>
       includes relabelling the crossings and/or components,
       reflecting the entire diagram, rotating the entire diagram,
       and/or reversing individual link components.
      </para>
      <para>
       An example is <literal>dabcabcv-</literal>, which represents the trefoil.
      </para>
      <para>
       Knot/link signatures played a significant role in the 19-crossing
       knot tabulation <xref linkend="bib-burton-knots"/>.
       They support both classical and virtual link diagrams, and they support
       all links with fewer than 64 components.
      </para>
     </listitem>
     <listitem id="link-new-classical-gauss">
      <para>
       <firstterm>Classical Gauss codes</firstterm>:
       These are sequences of integers that encode the crossings that you
       pass through as you traverse the knot from an arbitrary starting point.
       Crossings are numbered consecutively from 1 to
       <replaceable>n</replaceable> (but in any order),
       and each crossing is written as a positive or negative integer
       according to whether you pass over or under it.
      </para>
      <para>
       An example of a Gauss code is
       <literal>1 -2 3 -1 2 -3</literal>,
       which represents the trefoil.
      </para>
      <para>
       Classical Gauss codes are commonly used in the literature.
       Be aware that they do not specify the orientation of the diagram, and
       (more importantly) for composite knots they may not even uniquely
       define the topology of the knot.
       If this is a problem, consider using either
       <emphasis>oriented</emphasis> or <emphasis>signed</emphasis>
       Gauss codes, or knot/link signatures instead.
      </para>
      <para>
       In &regina;, classical Gauss codes only support knots (not
       multiple-component links), and they only support classical (not virtual)
       knot diagrams.
      </para>
     </listitem>
     <listitem id="link-new-oriented-gauss">
      <para>
       <firstterm>Oriented Gauss codes</firstterm>:
       These likewise encode the crossings that you pass through as you
       traverse the knot, but with more precise information than a
       classical Gauss code.
       Again the crossings are numbered consecutively from 1 to
       <replaceable>n</replaceable> (but in any order);
       each crossing is then written with a sign
       (<literal>+</literal> or <literal>-</literal>),
       an arrow (either less-than or greater-than), and a positive integer
       (which identifies the crossing).
       The sign indicates whether you pass over (<literal>+</literal>)
       or under (<literal>-</literal>) the crossing, and
       the arrow indicates whether the other strand of the crossing
       passes from right-to-left (<literal>&lt;</literal>) or
       left-to-right (<literal>&gt;</literal>).
      </para>
      <para>
       An example is
       <literal>+&gt;1 -&lt;2 +&gt;3 -&lt;1 +&gt;2 -&lt;3</literal>,
       which represents the left-hand trefoil.
      </para>
      <para>
       Oriented Gauss codes were introduced by Andreeva et al., and
       are described as part of their
       <ulink url="http://www.javaview.de/services/knots/doc/description.html#gc">Book Knot Simplifier</ulink>.
       Unlike classical Gauss codes, they preserve the orientation of the
       diagram, and they correctly identify the topology of composite knots.
      </para>
      <para>
       In &regina;, oriented Gauss codes support both classical and virtual
       diagrams.  However, they only support knots (not multiple-component
       links).
      </para>
     </listitem>
     <listitem id="link-new-signed-gauss">
      <para>
       <firstterm>Signed Gauss codes</firstterm>:
       Like oriented Gauss codes, these encode the crossings that you pass
       through as you traverse the knot but with more precise information than
       a classical Gauss code.
       Once more the crossings are numbered consecutively from 1 to
       <replaceable>n</replaceable> (but in any order);
       each crossing is then written with a letter (<literal>O</literal> or
       <literal>U</literal>), a positive integer (which identifies the
       crossing), and a sign (<literal>+</literal> or <literal>-</literal>).
       This time the letter indicates whether you pass over
       (<literal>O</literal>) or under (<literal>U</literal>) the crossing,
       and the sign indicates whether the crossing is positive or negative.
       There are no spaces in the code at all.
      </para>
      <para>
       An example is
       <literal>U1+O2+U3-O4-U2+O1+U4-O3-</literal>,
       which represents the figure eight knot.
      </para>
      <para>
       Oriented Gauss codes were introduced by Kauffman
       <xref linkend="bib-kauffman-virtual"/>.
       Like oriented Gauss codes (and <emphasis>unlike</emphasis> classical
       Gauss codes), they preserve the orientation of the diagram, and they
       correctly identify the topology of composite knots.
      </para>
      <para>
       In &regina;, signed Gauss codes support both classical and virtual
       diagrams.  However, they only support knots (not multiple-component
       links).
      </para>
     </listitem>
     <listitem id="link-new-dt">
      <para>
       <firstterm>Dowker-Thistlethwaite notation</firstterm>:
       This is essentially a more streamlined variant of
       classical Gauss codes.  It has played an important historical
       role in knot tabulation; see Adams <xref linkend="bib-adams-knotbook"/>
       for some history and also a precise description of the format.
      </para>
      <para>
       &regina; understands both the numerical and alphabetical variants
       of Dowker-Thistlethwaite notation.  The numerical variant
       involves a sequence of <replaceable>n</replaceable> even signed
       integers.
       The alphabetical variant transforms this into a compact text string by
       replacing the positive integers
       <literal>2</literal>,<literal>4</literal>,<literal>6</literal>,&hellip;
       with lower-case letters
       <literal>a</literal>,<literal>b</literal>,<literal>c</literal>,&hellip;,
       and replacing the negative integers
       <literal>-2</literal>,<literal>-4</literal>,<literal>-6</literal>,&hellip;
       with upper-case letters
       <literal>A</literal>,<literal>B</literal>,<literal>C</literal>,&hellip;.
       The alphabetical variant can only be used to describe knots with
       26 crossings or fewer.
      </para>
      <para>
       Examples are <literal>4 6 2</literal> or <literal>bca</literal>,
       both of which represent the trefoil.
      </para>
      <para>
       Like classical Gauss codes, Dowker-Thistlethwaite notation
       does not specify the orientation of the diagram, and
       (more importantly) for composite knots may not uniquely
       define the topology of the knot.
       If this is a problem, consider using either oriented or signed
       Gauss codes, or knot/link signatures instead.
      </para>
      <para>
       In &regina;, Dowker-Thistlethwaite notation only supports knots (not
       multiple-component links), and only supports classical (not virtual)
       knot diagrams.
      </para>
     </listitem>
     <listitem id="link-new-pd">
      <para>
       <firstterm>Planar diagram codes</firstterm>:
       These are sequences of 4-tuples that encode the local connections
       around each crossing.  Unlike the other code types described
       here, planar diagram codes can encode multiple-component links.
      </para>
      <para>
       In a planar diagram code for a link with
       <replaceable>n</replaceable> crossings, the strands are numbered
       1,&hellip;,2<replaceable>n</replaceable>.  Each 4-tuple
       represents a single crossing, and lists the four strands that
       meet at that crossing in counter-clockwise order, beginning with
       the incoming lower strand.  &regina; will number the crossings
       0,&hellip;,(<replaceable>n</replaceable>-1) in the same order as
       the tuples are presented.
      </para>
      <para>
       An example of a planar diagram code is
       <literal>[[1,4,2,5], [3,6,4,1], [5,2,6,3]]</literal>,
       which represents the left-hand trefoil.
      </para>
      <para>
       You may separate the integers with any combination of whitespace,
       commas, round/square/curly brackets, and/or the special symbols
       <literal>PD</literal>, <literal>X</literal>, <literal>Xp</literal>,
       <literal>Xm</literal> or <literal>P</literal> (these symbols
       appear in other sources, but have no special meaning for &regina;).
       So, for example, the left-hand trefoil above could instead be
       presented as <literal>PD[X[1,5,2,4], X[3,1,4,6], X[5,3,6,2]]</literal>,
       or just <literal>1 5 2 4 3 1 4 6 5 3 6 2</literal>.
      </para>
      <para>
       Planar diagram codes are used in the
       <ulink url="http://katlas.org/wiki/Planar_Diagrams">Knot Atlas</ulink>
       (for example).
       They have two limitations:
       they cannot represent zero-crossing unknot components; also, if
       the link has a component that consists entirely of over-crossings
       (i.e., an unknot placed &ldquo;on top&rdquo; of the diagram) then
       the orientation of that component is not uniquely determined.
      </para>
      <para>
       In &regina;, planar diagram codes support both classical and virtual
       link diagrams, and they support both knots and multiple-component links.
      </para>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    If you already have a knot or link and you wish to view these different
    text codes, you can do this through the
    <link linkend="link-codes">codes tab</link>.
   </para>
   <caution><para>
    Knot/link signatures and Dowker-Thistlethwaite notation are
    both <emphasis>case sensitive</emphasis>!
    Be sure that you are entering upper-case and lower-case correctly
    (or better, copy and paste the text using the clipboard if you can).
   </para></caution>

  </sect2>
  <sect2 id="link-new-torus">
   <title>Torus Links</title>

   <para>
    &regina; can create a new torus link with the given parameters
    (<replaceable>p</replaceable>, <replaceable>q</replaceable>).
    This essentially involves drawing a
    (<replaceable>p</replaceable>, <replaceable>q</replaceable>)
    curve on an unknotted torus in 3-space and then removing the torus.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="newlink-torus"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    The parameters
    <replaceable>p</replaceable> and <replaceable>q</replaceable>
    must be non-negative integers.  They do not need to be coprime:
    if their greatest common divisor is
    <replaceable>d</replaceable>&nbsp;&gt;&nbsp;1 then the result will
    be a link with <replaceable>d</replaceable> components.
   </para>
   <tip><para>
    You do not need to separate the lens space parameters with commas;
    any punctuation, or even just spaces, will suffice.
   </para></tip>
  </sect2>

  <sect2 id="link-new-whitehead-double">
   <title>Whitehead Doubles</title>
   <para>
    &regina; can build the Whitehead double of some other knot
    <replaceable>K</replaceable>.
    This involves creating two parallel copies of <replaceable>K</replaceable>
    using the <link linkend="seifert-framing">Seifert framing</link>,
    and then cutting open these two copies and
    re-connecting them using a clasp.  &regina; will use positive crossings
    for the clasp.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="newlink-whitehead-double"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    To do this, select <replaceable>K</replaceable> in the
    <guilabel>Source</guilabel> drop-down box.  This should be some knot that
    you already have in your data file.
    Note that &regina; can only build the Whitehead double of a knot, not a
    multiple-component link.
   </para>
   <tip><para>
    If you already have the source knot <replaceable>K</replaceable> open for
    viewing, another way to create its Whitehead double is to select
    <menuchoice>
     <guimenu>Knot&nbsp;/&nbsp;Link</guimenu>
     <guimenuitem>Build Whitehead Double</guimenuitem>
    </menuchoice>
    from the menu.
    The Whitehead double will be added as a new knot directly beneath
    <replaceable>K</replaceable> in the packet tree.
   </para></tip>
  </sect2>

  <sect2 id="link-new-cables">
   <title>Parallel Cables</title>
   <para>
    &regina; can build a new link containing &vark; cables of some other
    link <replaceable>L</replaceable>, all parallel to each
    other via a chosen framing.  This will effectively:
    <itemizedlist>
     <listitem><para>
      treat each component of the original link <replaceable>L</replaceable>
      as a ribbon, using the chosen framing;
     </para></listitem>
     <listitem><para>
      create &vark; parallel copies of <replaceable>L</replaceable>, following
      each other side-by-side along these ribbons.
     </para></listitem>
    </itemizedlist>
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="newlink-parallel-cables"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    To do this:
   </para>
   <itemizedlist>
    <listitem><para>
     Select <replaceable>L</replaceable> in the <guilabel>Source</guilabel>
     drop-down box.  This should be some knot or link that you already have
     in your data file.
    </para></listitem>
    <listitem><para>
     Enter the number of cables &vark;, which should be an integer greater
     than one (but not too large&mdash;see the warning below).
    </para></listitem>
    <listitem><para>
     Choose the framing to use.  The options are:
     <glosslist>
      <glossentry>
       <glossterm id="seifert-framing"><guilabel>Seifert
        framing</guilabel></glossterm>
       <glossdef>
        <para>
         This framing is a property of the underlying link
         (i.e., it does not depend on your specific choice of link diagram).
         One way to imagine it is to construct a Seifert surface (an
         orientable surface embedded in the 3-sphere whose boundary is
         the link), and then place the ribbons so that they sit flat upon
         this surface.
        </para>
        <para>
         Another way to imagine it is purely algebraic:
         for each component &varC;
         of the link, each edge of the corresponding ribbon follows a
         curve with trivial homology in the complement of the knot &varC;.
        </para>
       </glossdef>
      </glossentry>
      <glossentry>
       <glossterm><guilabel>Blackboard framing</guilabel></glossterm>
       <glossdef>
        <para>
         Here each ribbon sits flat in the plane of the link diagram, with no
         twists. This framing depends on the specific link diagram that
         you are using.
        </para>
       </glossdef>
      </glossentry>
     </glosslist>
    </para></listitem>
   </itemizedlist>
   <warning><para>
    The parallel cables construction can generate an enormous number of
    crossings.  If you create &vark; cables then you will
    multiply the number of crossings in the source link by
    &vark;<superscript>2</superscript>,
    and if you chose the Seifert framing then there may be even more
    crossings due to twists in the ribbons.
    Use a large &vark; at your peril!
   </para></warning>
   <tip><para>
    If you already have the source link <replaceable>L</replaceable> open for
    viewing, another way to create parallel cables of
    <replaceable>L</replaceable> is to select
    <menuchoice>
     <guimenu>Knot&nbsp;/&nbsp;Link</guimenu>
     <guimenuitem>Build Parallel Cables&hellip;</guimenuitem>
    </menuchoice>
    from the menu.
    The parallel cables will be added as a new link directly beneath
    <replaceable>L</replaceable> in the packet tree.
   </para></tip>
  </sect2>
 </sect1>

 <sect1 id="link-analysis">
  <title>Analysis</title>

  <para>
   You can view a variety of information about the link diagram, as well
   as topological invariants of the link itself, by stepping through the
   different tabs in the link viewer.
   Here we talk through the different kinds of information and
   invariants on offer.
  </para>

  <sect2 id="link-crossings">
   <title>Crossings and Components</title>
   <para>
    At the top of each link viewer is a header, which includes:
    whether the link is alternating;
    the number of link components (or the word &ldquo;knot&rdquo; to indicate
    just one); and
    the number of crossings, including how many are positive and negative.
   </para>
   <para>
    This header is circled in red below.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-header"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    If the link diagram is virtual (not classical), then the header will
    contain a second line indicating:
   </para>
   <itemizedlist>
    <listitem id="link-virtual-genus">
     <para>
      The <firstterm>virtual genus</firstterm> of the diagram.  This is
      the smallest genus of orientable surface in which the diagram embeds.
      Note that this is a property of the link <emphasis>diagram</emphasis>,
      not an invariant of the link itself.
     </para>
    </listitem>
    <listitem id="link-odd-writhe">
     <para>
      The <firstterm>odd writhe</firstterm>, or <firstterm>self-linking
      number</firstterm>.  This is an invariant of virtual knots
      (but not links), which sums the signs of all odd crossings.
      A crossing <replaceable>c</replaceable> is <firstterm>odd</firstterm> if,
      when traversing the knot, we pass through an odd number of crossings
      between the over-strand and the under-strand of
      <replaceable>c</replaceable>.
     </para>
     <para>
      The odd writhe is not shown for multiple-component links.
      For classical knots, the odd writhe is always zero.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-header-virtual"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    The <guilabel>Crossings</guilabel> tab shows the details of the individual
    crossings and components that make up the link.
    &regina; numbers crossings 0,1,2,&hellip;, and likewise for components.
   <para>
   </para>
    For each component of the link, there will be a box beneath the
    <guilabel>Crossings</guilabel> tab showing the crossings that you
    visit in order as you traverse the link component from an
    arbitrary starting point.
    There are two different ways that you can view this information
    (with a drop-down box to switch between them):
   </para>
   <para>
    <glosslist>
     <glossentry>
      <glossterm><guilabel>Pictures</guilabel></glossterm>
      <glossdef>
       <para>
        Each crossing will be shown visually as a pair of arrows,
        one crossing over the other.  One arrow will be a solid colour,
        and will run horizontally from left to right;
        this is the part of the link that you are traversing.
        The other arrow will be grey, and will run vertically (either up
        or down); this is the part of the link that you are passing over
        or under.  The crossing number will be written in the top-right
        corner beside the arrows.
       </para>
       <para>
        <inlinemediaobject>
         <imageobject>
          <imagedata multires="link-pictures"/>
         </imageobject>
        </inlinemediaobject>
       </para>
       <para>
        For each crossing, the arrow that you are traversing will be
        coloured blue for a positive crossing, or yellow for a negative
        crossing. (This is just a visual aid, and is not strictly necessary;
        you can already tell the sign of the crossing from the arrangement
        of the arrows.)
       </para>
       <para>
        Crossings are visited in order from left to right along each row
        of the display, one row at a time (i.e., the same way that you
        would read English text in a book).
       </para>
       <tip>
        <para>
         Because the arrows you traverse always run from left to right, you
         can imagine the individual crossings as being attached together
         in the order that they are displayed.
         In other words, you can picture the link component as a long
         arrow running from left to right through the individual crossings
         (and then wrapping around to the next line each time it reaches
         the right-hand edge of the window).
         Of course this picture breaks down once you revisit the
         same crossing for a second time.
        </para>
       </tip>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>Text</guilabel></glossterm>
      <glossdef>
       <para>
        Each crossing will be shown as a number with a plus or minus
        sign attached.  The number indicates which crossing you are
        passing through, and the sign indicates whether it is a positive or
        negative crossing. The sign will appear as a superscript if you
        are passing over the crossing, or a subscript if you are passing under.
       </para>
       <para>
        <inlinemediaobject>
         <imageobject>
          <imagedata multires="link-text"/>
         </imageobject>
        </inlinemediaobject>
       </para>
       <para>
        As before, crossings are visited in order from left to right
        along each row, one row at a time.
        Also as before, positive crossings will be coloured blue and
        negative crossings will be coloured yellow (but again the colour
        is just a visual aid, since you already have this information
        from the plus/minus sign).
       </para>
      </glossdef>
     </glossentry>
    </glosslist>
   </para>
  </sect2>

  <sect2 id="link-polynomials">
   <title>Polynomial Invariants</title>
   <para>
    On the <guilabel>Polynomials</guilabel> tab, you can view
    several polynomial invariants of the link and of the link diagram.
    Which polynomials you see will depend upon whether your link diagram is
    classical or virtual.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-polynomials"/>
     </imageobject>
    </inlinemediaobject>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-polynomials-virtual"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    The polynomials that you might see include:
    <glosslist>
     <glossentry>
      <glossterm><guilabel>Alexander</guilabel> (classical only)</glossterm>
      <glossdef>
       <para>
        The Alexander polynomial is a single-variable polynomial invariant.
        It is relatively weak, but (unlike many of the other invariants listed
        here) it can be computed in polynomial time.
       </para>
       <para>
        &regina; will only compute Alexander polynomials for knots
        (not multiple-component links).
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>Jones</guilabel> (classical and virtual)</glossterm>
      <glossdef>
       <para>
        The Jones polynomial is a single-variable polynomial in the variable
        <replaceable>t</replaceable>, whose exponents are integers for
        classical knots, but whose exponents may be half-integers in other cases
        (depending on the number of link components and/or whether the link is
        virtual).
        You may therefore see this presented either as a polynomial in
        <replaceable>t</replaceable> or as a polynomial in
        &radic;<replaceable>t</replaceable>.
       </para>
       <para>
        If you have opted <link linkend="options-unicode">not to use
        unicode symbols</link>, then you will see this as a polynomial
        in either <replaceable>t</replaceable> or
        <replaceable>sqrt_t</replaceable>.
       </para>
       <para>
        &regina; can compute Jones polynomials for link diagrams
        with any number of components.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>&homflypt;</guilabel> (classical only)</glossterm>
      <glossdef>
       <para>
        The &homflypt; polynomial is a two-variable polynomial with two
        common formulations: one in the variables
        (<replaceable>&alpha;</replaceable>, <replaceable>z</replaceable>)
        and one in the variables
        (<replaceable>l</replaceable>, <replaceable>m</replaceable>).
        These formulations give different polynomials, which are
        related via a simple substitution.
        &regina; offers a pair of buttons beside the &homflypt;
        polynomial for you to choose which formulation is displayed.
       </para>
       <para>
        &regina; can compute &homflypt; polynomials for link diagrams
        with any number of components.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>Kauffman bracket</guilabel>
       (classical and virtual)</glossterm>
      <glossdef>
       <para>
        The Kauffman bracket is a property of the link diagram, not an
        invariant of the link, and is related to the Jones polynomial
        by a simple substitution.
        See Adams <xref linkend="bib-adams-knotbook"/> for a simple
        combinatorial introduction to the Kauffman bracket and the
        Jones polynomial.
       </para>
       <para>
        &regina; can compute Kauffman brackets for link diagrams
        with any number of components.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>Affine index</guilabel> (virtual only)</glossterm>
      <glossdef>
       <para>
        The affine index polynomial is a single-variable polynomial invariant
        that is relatively weak, but which nevertheless provides some useful
        information for virtual knots.  Its main advantage is that it is
        extremey fast to compute even for large knot diagrams (the computation
        runs in very small polynomial time).
       </para>
       <para>
        &regina; will only compute affine index polynomials for virtual knots
        (not multiple-component virtual links).
       </para>
       <para>
        The affine index polynomial is not shown at all for classical link
        diagrams, since in the classical case the affine index polynomial is
        always zero.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>Arrow</guilabel> (virtual only)</glossterm>
      <glossdef>
       <para>
        The arrow polynomial enhances the Kauffman bracket in a way that
        makes it more powerful for virtual links, and that makes it a
        true link invariant.  Whereas the Kauffman bracket is a polynomial
        in the single variable <replaceable>A</replaceable>,
        the arrow polynomial is a polynomial in many variables
        (<replaceable>A</replaceable>,
        <replaceable>K</replaceable><subscript>1</subscript>,
        <replaceable>K</replaceable><subscript>2</subscript>,
        <replaceable>K</replaceable><subscript>3</subscript>,
        &hellip;).
       </para>
       <para>
        &regina; can compute arrow polynomials for virtual link diagrams
        with any number of components.
       </para>
       <para>
        The arrow polynomial is not shown at all for classical link diagrams,
        since in the classical case the arrow polynomial is just the
        Kauffman bracket with some normalisation applied.
       </para>
      </glossdef>
     </glossentry>
    </glosslist>
   </para>
   <para>
    For larger links, you may see a <guilabel>Calculate</guilabel> button
    instead of a polynomial. This is because many of these polynomials
    require exponential time to compute.  In this case you will need to
    press the <guilabel>Calculate</guilabel> button and be prepared
    to wait&mdash;for most polynomials you will see the progress displayed, and
    you can cancel the computation if you like.
   </para>
   <para>
    For smaller links, all of the polynomials will be computed automatically.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-polynomials-calculate"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <tip>
    <para>
     You can copy any of these polynomials to the clipboard by
     right-clicking and selecting either
     <guilabel>Copy</guilabel> or <guilabel>Copy plain text</guilabel>.
     If you press <guilabel>Copy</guilabel> then the polynomial will be
     copied using <link linkend="options-unicode">unicode symbols</link>,
     and if you press <guilabel>Copy plain text</guilabel> then the
     polynomial will be copied in plain &ascii; symbols using a simple
     &ldquo;pidgin &tex;&rdquo;.
    </para>
   </tip>
   <tip>
    <para>
     If you find the polynomial exponents hard to read
     (due to the subscripts being very small),
     you can visit &regina;'s settings and
     <link linkend="options-unicode">disable unicode symbols</link>.
     This will change the polynomial display to use a simple
     &ldquo;pidgin &tex;&rdquo; instead.
    </para>
   </tip>
  </sect2>

  <sect2 id="link-algebra">
   <title>Algebraic Invariants</title>
   <para>
    The <guilabel>Algebra</guilabel> tab holds several smaller tabs
    that describe different groups associated with the link.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-algebra"/>
     </imageobject>
    </inlinemediaobject>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-algebra-virtual"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    Currently this shows the following groups:
    <glosslist>
     <glossentry>
      <glossterm><guilabel>Knot/Link Group</guilabel></glossterm>
      <glossdef>
       <para>
        This is the link group as constructed from the Wirtinger presentation
        (though &regina; will typically simplify the presentation before
        showing it here).
        Each relation is some variant of the form <literal>xy=yz</literal>,
        where <replaceable>y</replaceable> corresponds to the upper strand at
        some crossing, and <replaceable>x</replaceable> and
        <replaceable>z</replaceable> correspond to the two sides of the lower
        strand at that same crossing.
       </para>
       <itemizedlist>
        <listitem>
         <para>
          For classical links, this is isomorphic to the fundamental group of
          the link complement.  However, it is constructed differently, and so
          it may have a different presentation.
          If you are having difficulty simplifying it, you could perhaps try
          working with the triangulated
          <link linkend="link-complement">link complement</link> instead.
         </para>
        </listitem>
        <listitem>
         <para>
          For virtual links, the link group <emphasis>could</emphasis> change
          depending upon whether you view the link from above or below the
          diagram (i.e., <link linkend="link-flip">rotating</link> the link
          may change the isomorphism class).  For this reason, if the link
          diagram is virtual then you will see <emphasis>two</emphasis> groups:
          one as seen from above (using the classical Wirtinger presentation),
          and one as seen from below (obtained by switching the upper and
          lower strands at every crossing).
          The Goussarov-Polyak-Viro knot (which is one of &regina;'s
          <link linkend="link-new-example">ready-made examples</link> is a
          nice example of where these two groups differ.
         </para>
         <para>
          Note however that, for virtual links, the link group is not a
          particularly strong invariant.  You might wish to work with the
          extended group instead (see below).
         </para>
        </listitem>
       </itemizedlist>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>Extended Group</guilabel></glossterm>
      <glossdef>
       <para>
        This is the extended group of the link, as defined by
        Silver and Williams <xref linkend="bib-silver-extgrp"/>.
        This invariant is particularly useful for virtual links, where the
        ordinary link group is a fairly weak invariant.  However, it also
        yields more complex group presentations.
       </para>
       <para>
        Like the ordinary link group, the extended group of a virtual link may
        change depending upon whether you view the link from above or below
        the diagram, and so for virtual link diagrams &regina; will display
        both variants.
       </para>
      </glossdef>
     </glossentry>
    </glosslist>
   </para>
   <para>
    All groups will be presented in the same format as the fundamental group
    of a triangulation, and you are given the same tools to simplify them.
    See the section on
    <link linkend="tri-algebra-fund">fundamental groups</link>
    for further discussion of this.
   </para>
   <tip>
    <para>
     If you find the exponents in the group presentations hard to read
     (due to the superscripts being very small),
     you can visit &regina;'s settings and
     <link linkend="options-unicode">disable unicode symbols</link>.
     This will change the display to use a simple
     &ldquo;pidgin &tex;&rdquo; instead.
    </para>
   </tip>
  </sect2>

  <sect2 id="link-codes">
   <title>Text Codes</title>
   <para>
    The <guilabel>Text Codes</guilabel> tab allows you to export your
    knot or link in several text-based formats. Simply select a format
    from the drop-down box (indicated in the screenshot below), and the
    corresponding text code will be shown in the box beneath.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-codes"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    The codes that &regina; can display include:
    <glosslist>
     <glossentry>
      <glossterm><guilabel>Gauss codes</guilabel></glossterm>
      <glossdef>
       <para>
        This displays the classical, oriented and signed Gauss codes.
        Classical Gauss codes are common in the literature, but they
        suffer from ambiguities related to orientation; for
        composite knots they may not even uniquely define the topology.
        Oriented and signed Gauss codes solve this problem by adding a little
        more information.
       </para>
       <para>
        For a more detailed description of these formats, see the
        section on <link linkend="link-new-classical-gauss">creating
        knots from Gauss codes</link>.
       </para>
       <para>
        Currently &regina; only displays Gauss codes for knots (not
        multiple component links).  If your knot diagram is virtual (not
        classical), then &regina; will still display all three Gauss codes;
        however, only the oriented and signed variants contain enough
        informtion to reconstruct the diagram.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>Dowker-Thistlethwaite notation</guilabel></glossterm>
      <glossdef>
       <para>
        Like classical Gauss codes, Dowker-Thistlethwaite notation is
        also common in the literature, and also suffers from ambiguities
        related to orientation and composite knots.
        Dowker-Thistlethwaite notation comes in two
        forms&mdash;numerical and alphabetical&mdash;and &regina;
        displays both forms here.
       </para>
       <para>
        For a more detailed discussion of Dowker-Thistlethwaite notation,
        see the section on <link linkend="link-new-dt">creating
        knots from Dowker-Thistlethwaite notation</link>.
       </para>
       <para>
        Currently &regina; only displays Dowker-Thistlethwaite notation
        for knots (not multiple component links), and only for classical
        (not virtual) knot diagrams.
        Be aware that alphabetical Dowker-Thistlethwaite notation is
        case-sensitive (i.e., upper-case and lower-case matters).
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>Knot/link signature</guilabel></glossterm>
      <glossdef>
       <para>
        Knot/link signatures are &regina;s own text-based format, and were
        designed to have a combinatorial uniqueness property:
        two link diagrams have the same signature
        if and only if they are combinatorially isomorphic
        (which includes relabelling crossings and/or components,
        reflecting the entire diagram, rotating the entire diagram,
        and/or reversing individual link components).
       </para>
       <para>
        For a more detailed discussion of knot/link signatures,
        see the section on <link linkend="link-new-knotsig">creating
        knots from knot/link signatures</link>.
       </para>
       <para>
        These signatures are supported for all links with fewer than
        64 components, and they support both classical and virtual link
        diagrams.  Be aware that knot/link signatures are case-sensitive
        (i.e., upper-case and lower-case matters).
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>Planar diagram codes</guilabel></glossterm>
      <glossdef>
       <para>
        This displays the planar diagram code for the link.
        Planar diagram codes support multiple-component links,
        as well as both classical and virtual link diagrams.
        Their main limitations are that they cannot represent zero-crossing
        unknot components, and they cannot fix the orientation of a link
        component that consists entirely of over-crossings.
       </para>
       <para>
        For a detailed description of planar diagram codes, see the
        section on <link linkend="link-new-pd">creating
        links from planar diagram codes</link>.
       </para>
      </glossdef>
     </glossentry>
     <glossentry id="link-codes-jenkins">
      <glossterm><guilabel>Jenkins format</guilabel></glossterm>
      <glossdef>
       <para>
        This is a multiline text code described by Bob Jenkins,
        and used in his
        <ulink url="http://burtleburtle.net/bob/knot/homfly.html">&homflypt;
        polynomial software</ulink>.
        &regina; can happily display the
        Jenkins format for multiple-component links, and for both classical
        and virtual link diagrams.
       </para>
       <para>
        In this format, a link is described by a sequence of integers
        separated by whitespace.  We assume that there are
        <replaceable>n</replaceable> crossings in the link,
        labelled arbitrarily as 0,1,2,&hellip;.
        The sequence of integers will contain, in order:
        <itemizedlist>
         <listitem>
          <para>
           the number of components in the link;
          </para>
         </listitem>
         <listitem>
          <para>
           for each link component:
           <itemizedlist>
            <listitem>
             <para>
              the number of times you pass a crossing when traversing the
              component (i.e., the length of the component);
             </para>
            </listitem>
            <listitem>
             <para>
              for each link component:
              two integers for each crossing that you pass in such a traversal:
              the crossing label, and then either +1 or -1 according to
              whether you pass over or under the crossing respectively;
             </para>
            </listitem>
           </itemizedlist>
          </para>
         </listitem>
         <listitem>
          <para>
           for each crossing:
           <itemizedlist>
            <listitem>
             <para>
              the crossing label;
             </para>
            </listitem>
            <listitem>
             <para>
              the sign of the crossing (either +1 or -1).
             </para>
            </listitem>
           </itemizedlist>
          </para>
         </listitem>
        </itemizedlist>
       </para>
      </glossdef>
     </glossentry>
    </glosslist>
   </para>
   <para id="link-codes-construct">
    For all of these text codes except for Jenkins format,
    you can convert a text code back into a link as described in
    <link linkend="link-new-code">creating a new link</link>.
    Be aware that the resulting link might not use the same
    crossing numbers, and might even be a reflection and/or reversal
    of the original.
   </para>
   <para>
    For Jenkins format, &regina;'s graphical user interface does not offer a
    way to convert a code back into a link; however, you can always bring up
    a <link linkend="python-gui">&python; console</link> and call the
    function <userinput>Link::fromJenkins()</userinput> instead.
   </para>
  </sect2>

  <sect2 id="link-graphs">
   <title>Associated Graphs</title>
   <para>
    On the <guilabel>Graphs</guilabel> tab, you can view
    different graphs associated with the link diagram.
    These graphs are all related to the <firstterm>diagram
    graph</firstterm>, which is a 4-valent graph with one vertex for each
    crossing and edges that follow the strands of the link.
   </para>
   <para>
    There is a drop-down box for you to choose which graph you want to see.
    The options are:
    <glosslist>
     <glossentry id="link-graphs-tree">
      <glossterm><guilabel>Tree decomposition</guilabel></glossterm>
      <glossdef>
       <para>
        A <firstterm>tree decomposition</firstterm> (illustrated below)
        models the diagram graph using a rooted tree;
        you can read more about tree decompositions in the
        <link linkend="tri-graphs-tree">triangulations chapter</link>.
        &regina; uses these tree decompositions in its
        fixed-parameter tractable algorithms for the Jones and &homflypt;
        polynomials <xref linkend="bib-homfly-fpt"/>.
       </para>
       <para>
        <inlinemediaobject>
         <imageobject>
          <imagedata multires="link-graphs-tree"/>
         </imageobject>
        </inlinemediaobject>
       </para>
       <para>
        &regina; will display both the width and the number of bags
        above the tree decomposition itself.
       </para>
       <para>
        As with triangulations,
        &regina; does not guarantee to find a tree decomposition of
        the smallest possible width (i.e., it does not compute the precise
        <firstterm>treewidth</firstterm> of the diagram graph).
        Instead it uses fast heuristics that are found to
        produce low-width graphs in practice.
       </para>
      </glossdef>
     </glossentry>
     <glossentry id="link-graphs-nice">
      <glossterm><guilabel>Nice tree decomposition</guilabel></glossterm>
      <glossdef>
       <para>
        This is a variant of the tree decomposition that is less concise,
        but more useful in practice for algorithms since it imposes very
        tight constraints on the relationships between parent and child bags.
        Again, you can read more about these in the
        <link linkend="tri-graphs-nice">triangulations chapter</link>.
       </para>
       <para>
        <inlinemediaobject>
         <imageobject>
          <imagedata multires="link-graphs-nice"/>
         </imageobject>
        </inlinemediaobject>
       </para>
       <para>
        As with tree decompositions, &regina; will display both the
        width of the nice tree decomposition and the number of bags
        that it contains.  Typically the width will be the same as for the
        (plain) tree decomposition above, but the number of bags may
        be significantly larger (though still linear in the overall
        number of crossings).
       </para>
      </glossdef>
     </glossentry>
    </glosslist>
   </para>
  </sect2>

  <sect2 id="link-complement">
   <title>Link Complements</title>
   <para>
    &regina; includes many tools for working with 3-manifold triangulations,
    as well as working directly with knots and links. If you want access to
    these 3-manifold tools, you can build a triangulation of the link
    complement.
   </para>
   <para>
    The meaning of &ldquo;complement&rdquo; in this setting depends upon
    whether you are working with a classical or virtual link diagram.
    <itemizedlist>
     <listitem>
      <para>
       If you have a <emphasis>classical</emphasis> link diagram, then &regina;
       will build an ideal 3-manifold triangulation representing the complement
       of your link in the 3-sphere.
      </para>
      <para>
       The resulting triangulation will have exactly one ideal vertex
       for each link component.
      </para>
      <para>
       If your link diagram is
       <link linkend="link-decomposition-components">disconnected (in the
       graph-theoretical sense)</link>,
       then the resulting 3-manifold will be the connected sum of the
       complements of each connected diagram component.
       In particular, the resulting triangulation will always be connected.
      </para>
      <para>
       For classical links, the complement is a topological invariant of the
       link.
      </para>
     </listitem>
     <listitem>
      <para>
       If you have a <emphasis>virtual</emphasis> (non-classical) link diagram,
       let <replaceable>S</replaceable> be the smallest genus closed
       orientable surface in which the diagram embeds (this corresponds to the
       <link linkend="link-virtual-genus">virtual genus</link> of the diagram).
       Then &regina; will build the complement of your link diagram in
       the thickened surface
       <replaceable>S</replaceable>&nbsp;&times;&nbsp;I.
      </para>
      <para>
       The resulting triangulation will have one ideal vertex for each link
       component, plus an additional two ideal vertices for the two copies of
       <replaceable>S</replaceable> on the boundary of
       <replaceable>S</replaceable>&nbsp;&times;&nbsp;I.
      </para>
      <para>
       If your link diagram is
       <link linkend="link-decomposition-components">disconnected (in the
       graph-theoretical sense)</link>, then the surface
       <replaceable>S</replaceable> that is used will be the connected sum of
       the individual closed orientable surfaces that host each connected
       diagram component.  In particular, as in the classical case,
       the resulting triangulation will always be connected.
      </para>
      <para>
       For virtual links, the complement (and indeed the genus of the
       surface <replaceable>S</replaceable>) is not a topological invariant,
       but instead depends upon the specific link diagram.
      </para>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    There are two ways you can build a link complement:
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-complement-menu"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-complement-bar"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    <itemizedlist>
     <listitem>
      <para>
       If you select
       <menuchoice>
        <guimenu>Knot&nbsp;/&nbsp;Link</guimenu>
        <guimenuitem>Complement</guimenuitem>
       </menuchoice>
       from the menu, or press the <guilabel>Complement</guilabel>
       toolbar button (the first button circled above),
       then &regina; will use its own implementation to create a native
       &regina; triangulation of the complement.
       The triangulation will have access to the full suite of
       <link linkend="triangulations">&regina;'s tools for
       triangulations</link>, but the meridian and longitude curves from the
       diagram will be forgotten.
      </para>
      <para>
       The <guilabel>Complement</guilabel> option is available for all link
       diagrams, both classical and virtual.
      </para>
     </listitem>
     <listitem>
      <para>
       If you select
       <menuchoice>
        <guimenu>Knot&nbsp;/&nbsp;Link</guimenu>
        <guimenuitem>Complement Via &snappea;</guimenuitem>
       </menuchoice>
       from the menu, or press the <guilabel>&snappea;</guilabel>
       toolbar button (the second button circled above),
       then &regina; will pass the link to the &snappea; kernel to triangulate
       instead; the result will be a hybrid <link linkend="snappea">&snappea;
       triangulation</link>.
       The peripheral curves from the diagram will be preserved in
       &snappea;'s data structures; however, the available tools for
       working with the triangulation combinatorially will be more limited.
       See the introduction to the chapter on <link linkend="snappea">&snappea;
       triangulations</link> for more information on these limitations.
      </para>
      <para>
       The <guilabel>Complement Via &snappea;</guilabel> option is only available for
       classical link diagrams, not virtual diagrams.
      </para>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    Regardless of which method you use, the new triangulation will be
    inserted immediately beneath your link in the packet tree.
   </para>
  </sect2>

  <sect2 id="link-decomposition">
   <title>Decomposition</title>
   <para>
    At present &regina; only offers very basic algorithms for decomposing
    links into smaller pieces.  These include the following:
   </para>

   <sect3 id="link-decomposition-components">
    <title>Diagram Components</title>

    <para>
     If you have a link diagram that is a disjoint union of several smaller
     diagrams, you can split the diagram into its connected components.
     Here <firstterm>connected</firstterm> means that you can travel between
     any two parts of the diagram by following the link and/or jumping
     between upper and lower strands at crossings.  In other words,
     connectivity refers to the underlying 4-valent graph, where every
     crossing becomes a 4-way intersection.
    </para>
    <para>
     What this means:
    </para>
    <itemizedlist>
     <listitem><para>
      A disconnected link diagram must describe a splittable link.
     </para></listitem>
     <listitem><para>
      A splittable link, however, <emphasis>could</emphasis> be described by a
      single connected diagram component.  For example, you could perform
      trivial type II Reidemeister moves to make the different link components
      overlap (thus making the entire link diagram connected).
     </para></listitem>
     <listitem><para>
      In general, a single <emphasis>diagram component</emphasis>
      could contain multiple <emphasis>link components</emphasis>.
     </para></listitem>
    </itemizedlist>
    <para>
     To split a link diagram into its connected components, select
     <menuchoice>
      <guimenu>Knot&nbsp;/&nbsp;Link</guimenu>
      <guimenuitem>Extract Diagram Components</guimenuitem>
     </menuchoice>
     from the menu.
     You must open the link for viewing before you can do this.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata multires="link-components-menu"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
     &regina; will create several new links, one for each
     connected component of the original diagram.
     These will be added beneath the original in the packet tree.
     Your original (disconnected) link diagram will remain unchanged.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata multires="link-extract-components"/>
      </imageobject>
     </inlinemediaobject>
    </para>
   </sect3>
  </sect2>
 </sect1>

 <sect1 id="link-modification">
  <title>Modification</title>

  <para>
   There are several options for modifying a link diagram.
   Many of these can be found in the
   <guimenu>Knot&nbsp;/&nbsp;Link</guimenu> menu,
   which appears when you open a link for viewing.
  </para>
  <para>
   <inlinemediaobject>
    <imageobject>
     <imagedata multires="menu-link"/>
    </imageobject>
   </inlinemediaobject>
  </para>
  <caution><para>
   If you open one link for viewing but then select another in
   the packet tree, all modifications will apply to
   <emphasis>the link that you have open</emphasis> for viewing.
  </para></caution>

  <sect2 id="link-edit-crossings">
   <title>Editing Crossings</title>
   <para>
    You can edit a link directly by altering its individual crossings.
    &regina; gives you two ways do this, both of which will typically
    change the topology of the link:
    <glosslist>
     <glossentry>
      <glossterm><guilabel>Changing a crossing</guilabel></glossterm>
      <glossdef><para>
       This involves switching the over-strand with the under-strand;
       in other words, passing one strand through the other.
      </para><para>
       This operation is sometimes called
       <firstterm>switching</firstterm> a crossing.
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>Resolving a crossing</guilabel></glossterm>
      <glossdef><para>
       This removes the crossing entirely by chopping and splicing the
       over-strand and the under-strand together.
       Suppose the crossing originally
       involved strand <replaceable>x</replaceable> passing over strand
       <replaceable>y</replaceable>.
       After resolving the crossing, the section of the link that entered
       along <replaceable>x</replaceable> will exit
       along <replaceable>y</replaceable>, and the section that entered
       along <replaceable>y</replaceable> will exit
       along <replaceable>x</replaceable>.
       This will be done in a way that preserves orientation
       (i.e., the directions of the arrows).
      </para><para>
       This operation is sometimes called
       <firstterm>splicing</firstterm> a crossing.
      </para></glossdef>
     </glossentry>
    </glosslist>
   </para>
   <para>
    To change or resolve a crossing, switch to the
    <guilabel>Crossings</guilabel> tab, right-click on the crossing you
    want to change, and choose which operation you wish to perform.
    (You will also see an extra option to
    <link linkend="link-flip">reverse a single component</link>.)
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-editcrossing"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    On computers where right-click is not supported (e.g.,
    computers with a one-button mouse), you should use the normal
    secondary-click mechanism for bringing up a pop-up context menu.
   </para>
  </sect2>

  <sect2 id="link-simplify">
   <title>Automatic Simplification</title>
   <para>
    &regina; offers a number of <link linkend="link-reidemeister">local
    moves</link> (including the well-known Reidemeister moves) for
    modifying a link diagram without changing the underlying link.
    If you press the <guibutton>Simplify</guibutton> button (or select
    <menuchoice>
     <guimenu>Knot&nbsp;/&nbsp;Link</guimenu>
     <guimenuitem>Simplify</guimenuitem>
    </menuchoice>),
    then &regina; will use a combination of these moves to reduce the
    link to as few crossings as it can.
    This procedure is always fast and works well in many scenarios,
    but there is <emphasis>no guarantee</emphasis> that this will produce the
    fewest possible crossings:
    &regina; might get stuck at a local minimum from which it cannot
    see how to escape.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-simplify-menu"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-simplify-bar"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <note>
    <para>
     This fast simplification process will never
     <link linkend="link-flip">reflect or reverse</link> your link.
     This is <emphasis>not</emphasis> true of the exhaustive process
     described below.
    </para>
   </note>
   <sect3 id="link-simplify-exhaustive">
    <title>Exhaustive Simplification</title>
    <para>
     If &regina; cannot
     simplify the link immediately using its fast heuristics,
     and if your link has fewer than 64 components,
     then it will offer to perform a slower, more exhaustive search.  Press
     the <guilabel>Try harder</guilabel> button, as shown below:
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata multires="link-simplify-fail"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
     At this point, &regina; will begin an exhaustive search through the
     Reidemeister graph (this is essentially the graph that relates all
     diagrams of the underlying knot through Reidemeister moves):
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata multires="link-simplify-harder"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <para>
     You can stop this search at any time by pressing the
     <guilabel>Cancel</guilabel> button.
    </para>
    <para>
     Since the Reidemeister graph is infinite, &regina; will only search
     through intermediate knots with a certain maximum number of crossings.
     If this still fails, it will offer
     to search further, and you can press <guilabel>Keep trying</guilabel>
     to continue the search using larger intermediate knots than before.
     This cycle of ever-expanding searches will continue for as long as
     you like: &regina; will only stop if you decline to keep searching,
     or you cancel a search while it is running, or it finds a smaller
     knot diagram than the one it began with.
    </para>
    <para>
     <inlinemediaobject>
      <imageobject>
       <imagedata multires="link-simplify-keeptrying"/>
      </imageobject>
     </inlinemediaobject>
    </para>
    <warning><para>
     When searching the Reidemeister graph, both the time and memory
     consumption grow at a super-exponential rate relative to the number
     of crossings.  If you continue to press <guilabel>Keep trying</guilabel>
     over and over, you may well run out of time or memory (or both).
    </para></warning>
    <warning>
     <para>
      Unlike the fast simplification process when you first press the
      <guilabel>Simplify</guilabel> button, this exhaustive
      simplification process could well
      <link linkend="link-flip">reflect your link</link>
      and/or <link linkend="link-flip">reverse individual components</link>.
     </para>
    </warning>
    <tip id="link-gordian">
     <para>
      If your aim is to recognise a knot, an alternative is to
      <link linkid="link-complement">build the knot complement</link>
      and then try to recognise the resulting 3-manifold instead.
      The 3-manifold tools in &regina; are much richer, and in
      particular &regina;'s simplification of 3-manifold triangulations
      works extremely well in practice.
      For the 141-crossing Gordian unknot, building the complement
      will detect unknottedness immediately, since &regina; is typically able
      to reduce the complement immediately to a one-tetrahedron solid torus.
     </para>
    </tip>
   </sect3>
  </sect2>

  <sect2 id="link-reidemeister">
   <title>Reidemeister Moves</title>
   <para>
    Instead of using automatic simplification, you might wish to modify
    your link manually one step at a time.  You can do this
    using <firstterm>Reidemeister moves</firstterm>, which are small
    local modifications
    to the link diagram that preserve the topology of the underlying link.
    To perform Reidemeister moves, select
    <menuchoice>
     <guimenu>Knot&nbsp;/&nbsp;Link</guimenu>
     <guimenuitem>Reidemeister Moves&hellip;</guimenuitem>
    </menuchoice>
   from the menu.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-reidemeister-menu"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-reidemeister-bar"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    This will bring up a box containing all the Reidemeister moves that
    can be performed upon your link.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-reidemeisterbox"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    For each type of move, you will be offered a drop-down list of
    locations at which the move can be performed.  If a move is disabled
    (greyed out), this means there are no suitable locations in your
    link for that move type.
   </para>
   <para>
    Select a move, and then press <guibutton>Apply</guibutton> to perform it.
    You may continue to apply one move after another.  When you are done,
    press <guibutton>Close</guibutton> to close the Reidemeister move box.
   </para>
   <para>
    The available moves are:
    <glosslist>
     <glossentry>
      <glossterm><guilabel>R1 twist</guilabel></glossterm>
      <glossdef><para>
       Introduces a small local twist in a strand of the link.
       Each option in the drop-down list specifies a strand
       (described as an arrow between two crossings),
       which side of the strand to twist on (left or right,
       as viewed when facing the direction of the arrow),
       and the sign of the new crossing that will appear
       (positive or negative).
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>R1 untwist</guilabel></glossterm>
      <glossdef><para>
       The opposite of an R1&nbsp;twist.
       Each option in the drop-down list corresponds to a crossing where a
       local twist is found
       (this corresponds to the new crossing introduced by an
       R1&nbsp;twist move).
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>R2 overlap</guilabel></glossterm>
      <glossdef><para>
       Takes two strands that border the same cell in the link diagram,
       and passes one over the other.
       This move comes with <emphasis>two</emphasis> drop-down lists,
       marked <guilabel>Over</guilabel> and <guilabel>Under</guilabel>,
       and you need to select your strands in this order.
      </para><para>
       First, use the <guilabel>Over</guilabel> list to choose which strand
       will pass <emphasis>over</emphasis> the other;
       each option in this list specifies both the strand
       (as an arrow between two crossings) and in which direction it will
       be pushed (left or right, as viewed when facing the direction of
       the arrow).
       This will cause the <guilabel>Under</guilabel> list to be re-filled
       with compatible strands that can be pushed under the first,
       and now you can select one of these options also.
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>R2 separate</guilabel></glossterm>
      <glossdef><para>
       The opposite of an R2&nbsp;overlap.
       Each option in the drop-down list describes a pair of
       crossings that are connected by a pair of strands that can be pulled
       apart (these correspond to the two new crossings introduced by an
       R2&nbsp;overlap move).
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm><guilabel>R3</guilabel></glossterm>
      <glossdef><para>
       Passes a strand of the link over a nearby crossing.
       This move takes place around a triangular cell in the link diagram,
       and each option in the drop-down list corresponds to the three
       crossings that surround this triangle.
      </para></glossdef>
     </glossentry>
    </glosslist>
   </para>
  </sect2>

  <sect2 id="link-flip">
   <title>Reflection, Rotation and Reversal</title>
   <para>
    &regina; offers some simple transformations related to orientation:
    each of these changes will alter the link diagram, but the
    <link linkend="link-new-knotsig">knot/link signature</link> will stay
    the same.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-refrotrev-menu"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-refrotrev-bar"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <itemizedlist>
    <listitem><para>
     If you select
     <menuchoice>
      <guimenu>Knot&nbsp;/&nbsp;Link</guimenu>
      <guimenuitem>Reflect</guimenuitem>
     </menuchoice>
     from the menu (or press the <guilabel>Reflect</guilabel> button on
     the toolbar), &regina; will reflect your link about an axis in the
     plane.  Each crossing will change sign (positive becomes negative
     and vice versa), but over-crossings will remain over-crossings, and
     under-crossings will remain under-crossings.
    </para></listitem>
    <listitem><para>
     If you select
     <menuchoice>
      <guimenu>Knot&nbsp;/&nbsp;Link</guimenu>
      <guimenuitem>Rotate</guimenuitem>
     </menuchoice>
     from the menu, &regina; will rotate your link about an axis in the
     plane (like turning a sheet of paper over so the back becomes visible).
     This means that over-crossings will become under-crossings
     and vice versa, but the sign of each crossing will remain the same.
    </para></listitem>
    <listitem><para>
     If you select
     <menuchoice>
      <guimenu>Knot&nbsp;/&nbsp;Link</guimenu>
      <guimenuitem>Reverse</guimenuitem>
     </menuchoice>
     from the menu, &regina; will reverse the orientation (i.e.,
     direction of traversal) of every component of your link.
     Both the sign (positive or negative) and the side (under or over)
     of each crossing will remain the same, but each component will walk
     through its crossings in reverse order.
    </para></listitem>
   </itemizedlist>
   <para>
    For a link with multiple components, you can reverse an individual
    component by switching to the <guilabel>Crossings</guilabel> tab and
    right-clicking on any part of the component that you wish to reverse.
    On computers where right-click is not supported (e.g.,
    computers with a one-button mouse), you should use the normal
    secondary-click mechanism for bringing up a pop-up context menu.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-editcrossing"/>
     </imageobject>
    </inlinemediaobject>
   </para>
  </sect2>

  <sect2 id="link-make-alternating">
   <title>Making a Link Alternating</title>
   <para>
    If a link diagram is non-alternating, &regina; can change some of its
    crossings in order to make the diagram alternating.
    (To <emphasis>change</emphasis> a crossing means to switch the upper
    and lower strands.)
    This operation will typically change the topology of the link.
   </para>
   <para>
    To do this, select
    <menuchoice>
     <guimenu>Knot&nbsp;/&nbsp;Link</guimenu>
     <guimenuitem>Make Alternating</guimenuitem>
    </menuchoice>
    from the menu.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-make-alternating-menu"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-make-alternating-bar"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    Your link diagram will be modified directly.
   </para>
   <para>
    For classical link diagrams this operation will always succeed.
    For virtual link diagrams it might not be possible; if the diagram cannot
    be made alternating then &regina; will report this and leave the diagram
    unchanged.
   </para>
  </sect2>

  <sect2 id="link-selfframe">
   <title>Self Framing</title>
   <para>
    To <emphasis>self frame</emphasis> a link means to add any necessary
    twists (i.e., Reidemeister&nbsp;1 moves) to ensure that each
    individual component has zero writhe.
   </para>
   <para>
    To do this, select
    <menuchoice>
     <guimenu>Knot&nbsp;/&nbsp;Link</guimenu>
     <guimenuitem>Self Frame</guimenuitem>
    </menuchoice>
    from the menu.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-selfframe-menu"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-selfframe-bar"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    Your link will be modified directly.
   </para>
  </sect2>

  <sect2 id="link-composewith">
   <title>Building Composite Links</title>
   <para>
    You can combine two links using the operation of
    <firstterm>composition</firstterm>.
    This will convert some link <replaceable>L</replaceable>
    into the composite link
    <replaceable>L</replaceable>&nbsp;#&nbsp;<replaceable>M</replaceable>
    for some other link <replaceable>M</replaceable>
    (note that
    <replaceable>M</replaceable> is allowed to be the same as
    <replaceable>L</replaceable>).
    The composition operation will respect the orientations (i.e.,
    directions of traversal) of each link.
   </para>
   <para>
    To form this composition, first open the the link
    <replaceable>L</replaceable> for editing;
    this is the link that you are operating on, and it will be
    modified directly.
    Then select
    <menuchoice>
     <guimenu>Knot&nbsp;/&nbsp;Link</guimenu>
     <guimenuitem>Compose With</guimenuitem>
    </menuchoice>
    from the menu.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-composewith"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    &regina; will ask you which other link to compose with;
    in other words, &regina; will ask you for the link
    <replaceable>M</replaceable>.
    This second link <replaceable>M</replaceable> will be
    left unchanged (unless of course you have chosen to compose
    <replaceable>L</replaceable> with itself, which is perfectly legal
    and will work as expected).
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-composewith-link"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    The link <replaceable>L</replaceable> will be changed directly
    into the resulting composite link.
   </para>
  </sect2>

  <sect2 id="link-insert">
   <title>Building Disjoint Unions</title>
   <para>
    You can also combine two links using a
    <firstterm>disjoint union</firstterm>.
    This will convert some link <replaceable>L</replaceable>
    into the split link
    <replaceable>L</replaceable>&nbsp;U&nbsp;<replaceable>M</replaceable>
    for some other link <replaceable>M</replaceable>
    (note that
    <replaceable>M</replaceable> is allowed to be the same as
    <replaceable>L</replaceable>).
    Essentially, this modifies <replaceable>L</replaceable> by placing a copy
    of <replaceable>M</replaceable> beside it.
    As with composition, the disjoint union will respect the orientations
    (i.e., directions of traversal) of each link.
   </para>
   <para>
    To form this union, first open the the link
    <replaceable>L</replaceable> for editing;
    this is the link that you are operating on, and it will be
    modified directly.
    Then select
    <menuchoice>
     <guimenu>Knot&nbsp;/&nbsp;Link</guimenu>
     <guimenuitem>Insert Link</guimenuitem>
    </menuchoice>
    from the menu.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-insert"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    &regina; will ask you which other link to insert;
    in other words, &regina; will ask you for the link
    <replaceable>M</replaceable>.
    This second link <replaceable>M</replaceable> will be
    left unchanged (unless you have chosen to insert
    <replaceable>L</replaceable> into itself, which is again legal
    and will work as expected).
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="link-insert-link"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    The link <replaceable>L</replaceable> will be changed directly
    into the disjoint union
    <replaceable>L</replaceable>&nbsp;U&nbsp;<replaceable>M</replaceable>.
   </para>
  </sect2>
 </sect1>
</chapter>

