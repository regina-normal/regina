<chapter id="angles">
 <title>Angle Structures</title>

 <para>
  An <firstterm>angle structure</firstterm> on a 3-manifold triangulation is a
  simple algebraic generalisation of a hyperbolic structure.
  It contains some but not all of the properties required to produce a
  hyperbolic metric&mdash;in essence, it extracts the only linear parts
  of the hyperbolic gluing equations.
  Angle structures were introduced by
  Rivin <xref linkend="bib-rivin-structures"/>
  <xref linkend="bib-rivin-combopt"/> and Casson,
  and further developed by
  Lackenby <xref linkend="bib-lackenby-taut"/>
  <xref linkend="bib-lackenby-anglestruct"/>.
 </para>
 <para>
  An angle structure assigns an angle to every edge of every tetrahedron
  of the triangulation (so if there are <replaceable>n</replaceable>
  tetrahedra, there are 6<replaceable>n</replaceable>
  angles assigned in total).
  This assignment must satisfy several conditions:
  <itemizedlist>
   <listitem><para>
    Each angle must be between 0 and &twopi; inclusive;
   </para></listitem>
   <listitem><para>
    Opposite edges of a tetrahedron must be assigned equal angles;
   </para></listitem>
   <listitem><para>
    The sum of all six angles in each tetrahedron is &twopi;;
   </para></listitem>
   <listitem><para>
    The sum of angles around each non-boundary edge of the triangulation
    is &twopi;.
   </para></listitem>
  </itemizedlist>
 </para>
 <para>
  &regina; also supports <firstterm>generalised angle structures</firstterm>,
  which allow angles that are negative and/or larger than &twopi;,
  but for these you will need to use <link linkend="python">&python;</link>
  or <link linkend="compiling">&cpp;</link>.
 </para>

 <sect1>
  <title>Strict Angle Structures</title>

  <para>
   If you can find a <firstterm>strict angle
   structure</firstterm>&mdash;that is, one in which every angle is
   strictly positive&mdash;then this is extremely powerful.  In
   particular, under some simple assumptions, it is enough to certify
   that the underlying 3-manifold is hyperbolic
   <xref linkend="bib-futer-angled"/>.
  </para>
  <para>
   If you simply wish to test whether a strict angle structure
   <emphasis>exists</emphasis>,
   you should visit the <link linkend="tri-hyperbolic">recognition tab</link>
   in the triangulation viewer (this is available for both &regina;'s native
   <link linkend="packet-triangulation3">triangulation packets</link>
   and its hybrid
   <link linkend="packet-snappea">&snappea; triangulation packets</link>).
   For this &regina; uses fast and exact linear programming techniques.
  </para>
  <para>
   <inlinemediaobject>
    <imageobject>
     <imagedata multires="snappea-recognition"/>
    </imageobject>
   </inlinemediaobject>
  </para>
  <para>
   If you wish to enumerate the space of <emphasis>all</emphasis>
   angle structures, then you should build an angle structure list
   as <link linkend="angles-creation">described below</link>.
  </para>
 </sect1>

 <sect1 id="angles-creation">
  <title>Enumerating Angle Structures</title>

  <para>
   Angle structures are stored in lists, which typically hold all
   vertex angle structures on a particular 3-manifold triangulation.
   Here <firstterm>vertex angle structures</firstterm>
   correspond to the vertices of the solution polytope for the
   equations and inequalities <link linkend="angles">described earlier</link>.
   This means that every possible angle structure on the triangulation
   can be expressed as a convex combination of the vertex angle strutures.
  </para>
  <para>
   To create a new angle structure list, select
   <menuchoice>
    <guimenu>Packet Tree</guimenu>
    <guimenuitem>New Angle Structure Solutions</guimenuitem>
   </menuchoice>
   from the menu (or press the corresponding toolbar button).
  </para>
  <para>
   <inlinemediaobject>
    <imageobject>
     <imagedata multires="menu-newangles"/>
    </imageobject>
   </inlinemediaobject>
  </para>
  <para>
   A <link linkend="packet-new">new packet</link> window will appear,
   asking for some additional details:
  </para>
  <para>
   <inlinemediaobject>
    <imageobject>
     <imagedata multires="newangles"/>
    </imageobject>
   </inlinemediaobject>
  </para>
  <para>
   <glosslist>
    <glossentry>
     <glossterm><guilabel>Triangulation</guilabel></glossterm>
     <glossdef>
      <para>
       This is the triangulation that will contain your angle structures.
       You may chose either one of &regina;'s native
       <link linkend="packet-triangulation3">triangulation packets</link>
       or one of its hybrid
       <link linkend="packet-snappea">&snappea; triangulation packets</link>.
       The new angle structure list will appear as a child of this
       triangulation in the packet tree.
      </para>
     </glossdef>
    </glossentry>
    <glossentry id="angles-tautonly">
     <glossterm><guilabel>Taut angle structures only</guilabel></glossterm>
     <glossdef>
      <para>
       If unchecked (the default), &regina; will enumerate all vertex
       angle structures.
      </para>
      <para>
       If checked, &regina; will only enumerate
       <emphasis>taut angle structures</emphasis>.
       These are angle strutures in which every angle is either 0 or &pi;.
       There are only ever finitely many taut structures (possibly
       none at all), and if you check this box then &regina; will enumerate
       them all.
       This is generally much faster
       than enumerating all vertex angle structures.
      </para>
      <para>
       Note that we use the Kang-Rubinstein definition of taut angle
       structure <xref linkend="bib-kang-taut"/>,
       which is based on the angles alone.  We do not use Lackenby's
       definition <xref linkend="bib-lackenby-taut"/>,
       which also requires consistent coorientations on the 2-faces of
       the triangulation.
      </para>
     </glossdef>
    </glossentry>
   </glosslist>
  </para>
  <para>
   Once you are ready, click <guibutton>OK</guibutton>.
   &regina; will enumerate the vertex angle structures as requested,
   package them into an angle structure list, and open this list
   for you to view.
  </para>
 </sect1>

 <sect1 id="angles-analysis">
  <title>Analysis</title>

  <para>
   When you open an angle structure list for viewing, you will see a
   table with all of the angle structures in your list.
  </para>
  <para>
   <inlinemediaobject>
    <imageobject>
     <imagedata multires="angles-coords"/>
    </imageobject>
   </inlinemediaobject>
  </para>
  <para>
   Above this table is a header
   displaying the total number of angle structures.
   If you enumerated <link linkend="angles-tautonly">taut structures
   only</link>, this will be reported in the header also:
  </para>
  <para>
   <inlinemediaobject>
    <imageobject>
     <imagedata multires="angles-tautheader"/>
    </imageobject>
   </inlinemediaobject>
  </para>
  <para>
   Otherwise the header will indicate whether
   or not the convex span of these angle structures
   contains any <link linkend="angles-propstrict">strict</link>
   and/or <link linkend="angles-proptaut">taut</link> structures
   (these terms are defined below).
  </para>
  <para>
   <inlinemediaobject>
    <imageobject>
     <imagedata multires="angles-header"/>
    </imageobject>
   </inlinemediaobject>
  </para>

  <sect2 id="angles-viewtri">
   <title>Viewing the Triangulation</title>

   <para>
    Like normal surfaces, angle structures are (since &regina;&nbsp;7.0)
    no longer linked to their source triangulations in the packet tree.
    You can move an angle structure list and/or its triangulation
    independently around in the tree, or you can modify or even delete the
    original triangulation.  All of these operations are now allowed and safe.
   </para>
   <para>
    Whatever happens, it is always possible to come back and view the original
    triangulation from which an angle structure list was created.
    You do this the same way as for normal surface lists; see the
    <link linkend="surfaces-viewtri">normal surfaces chapter</link>
    for details.
   </para>
  </sect2>

  <sect2 id="angles-viewstructurecoords">
   <title>Details of Individual Angle Structures</title>

   <para>
    Each row of the table represents a single angle structure
    in this list.
   </para>
   <para>
    The leftmost column is used to indicate special types of angle structure.
    Possible values include:
    <glosslist>
     <glossentry id="angles-propstrict">
      <glossterm><guilabel>Strict</guilabel></glossterm>
      <glossdef><para>
       Indicates a strict angle structure (all of its angles are
       strictly between 0 and &pi;).
      </para></glossdef>
     </glossentry>
     <glossentry id="angles-proptaut">
      <glossterm><guilabel>Taut</guilabel></glossterm>
      <glossdef>
       <para>
        Indicates a taut angle structure (all of its angles are
        equal to either 0 or &pi;).
       </para>
       <para>
        Here we use the Kang-Rubinstein definition of taut angle
        structure <xref linkend="bib-kang-taut"/>,
        which is based on the angles alone.  We do not use Lackenby's
        definition <xref linkend="bib-lackenby-taut"/>,
        which also requires consistent coorientations on the 2-faces of
        the triangulation.
       </para>
       <para>
        Note that some taut structures may be listed as
        <link linkend="angles-propveering">veering</link> instead
        (which indicates a stronger combinatorial structure).
       </para>
      </glossdef>
     </glossentry>
     <glossentry id="angles-propveering">
      <glossterm><guilabel>Veering</guilabel></glossterm>
      <glossdef>
       <para>
        Indicates a veering structure.
        This is a taut structure with additional (and very strong)
        combinatorial constraints; for details see
        <xref linkend="bib-hodgson-veering"/>.
       </para>
       <para>
        Note that we use the Hodgson et&nbsp;al.&nbsp;definition
        of veering structure <xref linkend="bib-hodgson-veering"/>.
        This is slightly more general than Agol's original definition
        <xref linkend="bib-agol-ideal"/>, in the same sense that
        the Kang-Rubinstein definition of taut angle structure is
        slightly more general than Lackenby's.  In particular, we do not
        require consistent coorientations on the 2-faces of the triangulation.
       </para>
      </glossdef>
     </glossentry>
    </glosslist>
    If an angle structure is neither strict nor taut, the
    leftmost cell will be left empty.
   </para>
   <para>
    The remaining columns list the individual angles that are assigned
    to edges in tetrahedra.
    These columns are labelled
    <guilabel>0:01/23</guilabel>, <guilabel>0:02/13</guilabel>,
    <guilabel>0:03/12</guilabel>, <guilabel>1:01/23</guilabel>,
    etc., where column
    <replaceable>t</replaceable>:<replaceable>ab</replaceable>/<replaceable>cd</replaceable>
    represents the angle assigned to tetrahedron
    <replaceable>t</replaceable> along the edge that joins tetrahedron vertices
    <replaceable>a</replaceable> and <replaceable>b</replaceable>, as
    well as the (opposite) edge that joins tetrahedron vertices
    <replaceable>c</replaceable> and <replaceable>d</replaceable>.
    Here 0&nbsp;&le;&nbsp;<replaceable>t</replaceable>&nbsp;&lt;&nbsp;<replaceable>n</replaceable>,
    and <replaceable>a</replaceable>,<replaceable>b</replaceable>,<replaceable>c</replaceable>,<replaceable>d</replaceable>
    are some permutation of 0,1,2,3.
   </para>
  </sect2>
 </sect1>
</chapter>
