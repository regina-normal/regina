<chapter id="foreign">
 <title>Importing and Exporting Data</title>

 <para>
  By default, &regina; reads and writes
  <filename>.rga</filename> data files in its own compressed
  &xml; file format.  The current (third-generation) file format was
  <link linkend="regina7-fileformat">introduced in &regina;&nbsp;7.0</link>.
 </para>
 <para>
  Besides this, &regina; can also import data from and export data to several
  other file formats (including &regina;'s own older second-generation format).
  This allows you to pass data between &regina; and other applications.
  This chapter outlines the available import and export formats.
 </para>
 <para>
  If you are writing filters for some other program and you need a full
  specification for &regina;'s own &xml; file format, select
  <menuchoice>
   <guimenu>Help</guimenu>
   <guisubmenu>File Format Reference</guisubmenu>
  </menuchoice> from the menu.
  You can also read the most up-to-date specification of &regina;'s file format
  <ulink url="https://regina-normal.github.io/current/docs/regina-xml/index.html">on the &regina; website</ulink>.
 </para>

 <sect1 id="foreign-import">
  <title>Importing</title>

  <para>
   An <firstterm>import</firstterm> involves reading data from some
   foreign file format and inserting it into your working packet tree
   (effectively merging it into whatever file you already have open).
   All imports are done through the
   <menuchoice>
    <guimenu>File</guimenu>
    <guisubmenu>Import</guisubmenu>
   </menuchoice>
   menu.
  </para>
  <para>
   <inlinemediaobject>
    <imageobject>
     <imagedata multires="menu-import"/>
    </imageobject>
   </inlinemediaobject>
  </para>
  <para>
   When you select an action from the
   <menuchoice>
    <guimenu>File</guimenu>
    <guisubmenu>Import</guisubmenu>
   </menuchoice>
   menu, you will first be asked to select a file.
   Once you have chosen the file to import, a second window will appear
   asking for additional details:
  </para>
  <para>
   <inlinemediaobject>
    <imageobject>
     <imagedata multires="import-snappea"/>
    </imageobject>
   </inlinemediaobject>
  </para>
  <para>
   <glosslist>
    <glossentry>
     <glossterm><guilabel>Import beneath:</guilabel></glossterm>
     <glossdef><para>
      Here you select where in the packet tree the imported data will appear.
      The import will appear as a child packet, directly beneath
      whatever &ldquo;parent&rdquo; you choose here.
     </para></glossdef>
    </glossentry>
    <glossentry id="import-label">
     <glossterm><guilabel>Label:</guilabel></glossterm>
     <glossdef><para>
      This will be the label (i.e., the name) of the new packet containing
      the imported data.
     </para></glossdef>
    </glossentry>
   </glosslist>
  </para>
  <para>
   &regina; can import data from the following file formats:
  </para>

  <sect2 id="import-regina">
   <title>&regina; Data Files</title>

   <para>
    You can import another &regina; data file.
    This effectively lets you insert the contents of one file inside another.
   </para>
   <para>
    This is a convenient way of merging two data files into one.
    You can also merge data files from the command-line using the
    <link linkend="man-regconcat"><command>regconcat</command></link>
    utility.
   </para>
   <para>
    &regina; can happily import either the new (third-generation, since
    &regina;&nbsp;7.0) or older (second-generation, until &regina;&nbsp;6.0.1)
    file formats, and can read both compressed and uncompressed &xml;.
   </para>
  </sect2>

  <sect2 id="import-snappea">
   <title>&snappea; Triangulations</title>

   <para>
    You can import a 3-manifold triangulation from &snappeapylink;,
    the excellent software for studying hyperbolic 3-manifolds by
    Culler, Dunfield and Weeks.
    Note that you can also perform some &snappea; calculations
    <link linkend="tri-snappea">directly within &regina;</link>.
   </para>
   <para>
    After the import, the triangulation will appear in &regina; as a
    hybrid <link linkend="packet-snappea">&snappea; triangulation</link>;
    this ensures that &snappea;-specific data (such as fillings and
    peripheral curves) will be preserved.
    You can then <link linkend="snappea-toregina">convert this</link>
    to one of &regina;'s <link linkend="packet-triangulation3">native
    triangulations</link> if you wish.
   </para>
   <para>
    The file that you import should be a plain text file in
    &snappea;'s triangulation format; an example is shown below.
    Any international characters should be encoded in &utf8;.
   </para>
   <programlisting>
    % Triangulation
    m002
    geometric_solution  2.02988321
    nonorientable_manifold
    CS_unknown

    0 2
        Klein   0.000000000000   0.000000000000
        Klein   0.000000000000   0.000000000000

    2
       1    1    1    1
     0132 3120 2130 3102
       0    1    0    0
      0  0  0  0  0  0  1 -1  0  0  0  0  1 -1  0  0
      0  1 -1  0  0  0  0  0 -1  0  0  1  0  0  0  0
      0  0  1 -1 -1  0  1  0  1  0  0 -1 -1  1  0  0
      0  0  1 -1 -1  0  1  0  1  0  0 -1 -1  1  0  0
      0.500000000000   0.866025403784

       0    0    0    0
     0132 3120 2130 3102
       0    1    0    0
      0  1 -1  0  0  0  0  0 -1  0  0  1  0  0  0  0
      0  0  0  0  0  0  1 -1  0  0  0  0  1 -1  0  0
      0 -1  1  0  1  0  0 -1  1  0  0 -1 -1  0  1  0
      0 -1  1  0  1  0  0 -1  1  0  0 -1 -1  0  1  0
      0.500000000000   0.866025403784
   </programlisting>
  </sect2>

  <sect2 id="import-orb">
   <title>&orbcasson; Triangulations</title>

   <para>
    You can import a 3-manifold triangulation from &orbcasson; format.
    &orburl; is a variant of &snappea; for calculating hyperbolic
    structures on 3-orbifolds and 3-manifolds, written by Damien Heard.
   </para>
   <para>
    The file that you import
    should be a plain text file in &orbcasson; format, which
    describes a triangulation in terms of its 1-skeleton.  The beginning
    of an example file is illustrated below.
    Any international characters should be encoded in &utf8;.
   </para>
   <programlisting>
    % orb
    8knot
    1  0  1.000  1vu  2uw  1ux  2xv  1xw  2vu
    2  0  1.000  1wu  2wx  1xv  2xu  1vw  2vw

    ...
   </programlisting>
  </sect2>

  <sect2 id="import-isosiglist">
   <title>Isomorphism / Knot Signature Lists</title>

   <para>
    You can import a list of isomorphism signatures or knot signatures
    from a text file.
    These signatures are a space-efficient, plain-text method of storing a
    list of triangulations or knots.
   </para>
   <para>
    An <firstterm>isomorphism signature</firstterm> is a
    compact sequence of letters, digits and/or punctuation that identifies a
    triangulation uniquely up to combinatorial isomorphism.
    A <firstterm>knot signature</firstterm> is a similar type sequence
    of symbols that encodes a knot diagram up to relabelling, rotation,
    reflection and/or reversal.
    See the <link linkend="tri-composition-isosig">composition viewer</link>
    for a more detailed discussion on isomorphism signatures, or
    <xref linkend="bib-burton-pachner-orprime"/> for examples of their use
    and a precise description of the 3-manifold signature format.
   </para>
   <para>
    The list should be stored in a plain text file with one triangulation
    or knot per line.  Each line may contain an arbitrary amount of data, but
    the first word of each line should be the isomorphism or knot signature.
    Note that signatures are <emphasis>case sensitive</emphasis>
    (i.e., upper-case and lower-case matter).  An example file for
    3-manifold triangulations is shown below.
   </para>
   <programlisting>
    dLQbcbchxjn   L(11,3)
    dLQbcbchxjj   L(10,3)
    dLQbcbcahrs   L(5,2)
    dLQbcbcahks   S3
    dLQbcbchhjw   L(9,2)
   </programlisting>
   <para>
    In an isomorphism signature list, all signatures must represent
    triangulations of the same dimension (so, for example, the list cannot
    contain a mix of 3-manifold and 4-manifold signatures; likewise, it cannot
    contain a mix of signatures for triangulations and knots).  The
    <menuchoice>
     <guimenu>File</guimenu>
     <guisubmenu>Import</guisubmenu>
    </menuchoice>
    menu has different menu items for importing lists in dimensions 2, 3 and 4,
    and for importing lists of knot signatures.  &regina; does support
    isomorphism signatures in higher dimensions, but for this you will
    need to use <link linkend="python">&python;</link>.
   </para>
   <para>
    The import will appear in your packet tree as a new
    <link linkend="packet-container">container</link>,
    which will contain a new triangulation for each isomorphism signature
    in the list.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="import-isosig"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    If you just wish to reconstruct a triangulation or knot from a single
    signature (not from many signatures), you can do this more easily by
    creating a <link linkend="tri-new-isosig">new triangulation</link>
    or a <link linkend="link-new-knotsig">new link</link>.
   </para>
  </sect2>

  <sect2 id="import-dehydrationlist">
   <title>Dehydrated Triangulation Lists</title>

   <para>
    You can import a list of dehydration strings from a text file.
    Like <link linkend="import-isosiglist">isomorphism signatures</link>,
    dehydration strings allow you to encode a list of 3-manifold
    triangulations in a space-efficient, plain-text manner.
   </para>
   <para>
    Dehydration strings are less powerful than isomorphism signatures:
    only some triangulations have them (the triangulation must be connected
    with no boundary triangles and &le;&nbsp;25 tetrahedra), and they are
    not unique up to isomorphism (so relabelling tetrahedra might change the
    dehydration string).  They feature in hyperbolic census papers
    such as <xref linkend="bib-cuspedcensus"/>,
    in which the dehydration format is explicitly described.
   </para>
   <para>
    The list should be stored in a plain text file with one triangulation
    per line.  Each line may contain an arbitrary amount of data, but the
    first word of each line should be the dehydration
    string.  An example file is shown below.
   </para>
   <programlisting>
    dafbcccaadl   N3,1   Z/3 + Z
    dadcbccdjkd   N3,2   Z
    dadbcccbbcv   N3,3   Z
    dadbcccccdm   N3,4   Z
    dadbcccaqhx   N3,5   Z/2 + Z/2 + Z
   </programlisting>
   <para>
    As with isomorphism signatures,
    the import will appear in your packet tree as a new
    <link linkend="packet-container">container</link>,
    which will contain a new triangulation for each dehydration string
    in the list.
   </para>
   <para>
    If you just wish to reconstruct a triangulation from a single
    dehydration string (not from many strings), you can do this
    more easily by creating a
    <link linkend="tri-new-dehydration">new triangulation</link>.
   </para>
  </sect2>

  <sect2 id="import-pyscript">
   <title>&python; Scripts</title>

   <para>
    You can import a &python; script, which will appear in your data
    file as a <link linkend="python-script">script packet</link>.
   </para>
   <para>
    Script packets can include pre-set <emphasis>variables</emphasis>
    that reference other packets in your data file.
    If the imported file begins with a specially
    formatted comment block, &regina; will recognise this and set
    variables in your script packet accordingly.
    This comment block will be written automatically when you
    <link linkend="export-pyscript">export a script packet</link>
    to a &python; file.
    The special comment block is used only for setting variables, and will
    not appear in the code for your new script packet.
   </para>
   <para>
    An example of such a comment block appears below.
   </para>
   <programlisting>
    ### Regina Script: Homology Summary
    ###
    ### Variable tri: 3-Manifolds
    ###
    ### Begin Script

    # See the users' handbook for more elaborate sample Python
    # sessions.

    # Output the homology of each triangulation.
    t = tri.firstChild()
    while t != None:
        print t.label() + ":", t.homology()
        t = t.nextSibling()
   </programlisting>
   <para>
    The comment block must appear at the very beginning
    of the file, and each line must begin with three hashes
    (<literal>###</literal>).  A line of the form
    &ldquo;<literal>###&nbsp;Regina&nbsp;Script:&nbsp;<replaceable>label</replaceable></literal>&rdquo;
    suggests to &regina; a <link linkend="import-label">default label</link>
    for your new packet.
    Each line of the form
    &ldquo;<literal>###&nbsp;Variable&nbsp;<replaceable>name</replaceable>:&nbsp;<replaceable>value</replaceable></literal>&rdquo;
    tells &regina; to add the variable <replaceable>name</replaceable>
    to the new script packet, and to make it refer to the packet
    in your data file named <replaceable>value</replaceable>.
   </para>
   <para id="encodings">
    During the import, &regina; will tell you how it will interpret any
    international characters in the script (that is, letters or symbols
    not found on a typical English keyboard).  Such characters are
    stored using a <firstterm>text encoding</firstterm>, such as
    &utf8; (a popular modern standard and the default in &regina;),
    or &latin1; (which has a long history of use with many Western European
    languages).
    If your script uses a different encoding, you will need to set this
    in <link linkend="options-encoding">&regina;'s options</link>.
    If you only ever use letters or symbols found on a typical English keyboard,
    you do not need to worry about this at all.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="i18n-import"/>
     </imageobject>
    </inlinemediaobject>
   </para>
  </sect2>

  <sect2 id="import-attachment">
   <title>Attachments</title>

   <para>
    You can insert <emphasis>any</emphasis> other file into your
    &regina; data file by importing it
    as an <link linkend="packet-attachment">attachment</link>.
    For example, you could import a &pdf; document that documents your
    work with detailed formulae and diagrams.
   </para>
   <para>
    To do this, select
    <menuchoice>
     <guimenu>Packet Tree</guimenu>
     <guimenuitem>New Attachment</guimenuitem>
    </menuchoice>
    from the menu.  &regina; will go through the same import process as
    described above.
   </para>
   <para>
    Once you have imported your attachment, you can safely edit, move or even
    delete the original file from your computer, since your &regina;
    data file will keep its own internal copy.
   </para>
  </sect2>
 </sect1>

 <sect1 id="foreign-export">
  <title>Exporting</title>

  <para>
   An <firstterm>export</firstterm> involves writing data from your
   working packet tree into some foreign file format.
   For most formats you can only export small pieces of your packet tree
   at a time (such as individual triangulations).
   All exports are done through the
   <menuchoice>
    <guimenu>File</guimenu>
    <guisubmenu>Export</guisubmenu>
   </menuchoice>
   menu.
  </para>
  <para>
   <inlinemediaobject>
    <imageobject>
     <imagedata multires="menu-export"/>
    </imageobject>
   </inlinemediaobject>
  </para>
  <para>
   When you select an action from the
   <menuchoice>
    <guimenu>File</guimenu>
    <guisubmenu>Export</guisubmenu>
   </menuchoice>
   menu, &regina; will ask you which packet to export.
   For most export formats &regina; will only export the selected packet,
   but for some formats (such as
   <link linkend="export-rga">&regina;'s own data format</link>)
   it will export an entire packet subtree.
  </para>
  <para>
   <inlinemediaobject>
    <imageobject>
     <imagedata multires="export-snappea"/>
    </imageobject>
   </inlinemediaobject>
  </para>
  <para>
   After selecting a packet, you will
   be asked to choose a filename for your export.
   &regina; will then save the exported data to that file.
  </para>
  <para>
   &regina; can export data to the following file formats:
  </para>

  <sect2 id="export-rga">
   <title>&regina; Data Files</title>

   <para>
    This is &regina;'s native file format, which saves data as
    compressed &xml;.
    &regina; can export an entire packet subtree to this format:
    just choose the root of of the subtree as the packet to export.
    &regina; will export not just the packet you select, but all of the
    packets beneath it in the tree.
   </para>
   <para>
    This is a convenient way of extracting a small portion from
    a larger data file.
   </para>
   <para>
    The packet that you select for export will become the top-level
    packet in the new tree (i.e., &regina; will not add a new
    <link linkend="packet-container">container</link>
    to the top of the export data file).
   </para>
   <para>
    There are three menu items for exporting to a &regina; data
    file:
    <itemizedlist>
     <listitem><para>
      <menuchoice>
       <guimenu>File</guimenu>
       <guisubmenu>Export</guisubmenu>
       <guimenuitem>&regina; Data File</guimenuitem>
      </menuchoice>
      will export the data as compressed &xml; using the
      <link linkend="regina7-fileformat">new file format</link>
      introduced with &regina;&nbsp;7.0.  This is the default file
      format that is used when you select
      <menuchoice>
       <guimenu>File</guimenu>
       <guimenuitem>Save</guimenuitem>
      </menuchoice>.
     </para></listitem>
     <listitem><para>
      <menuchoice>
       <guimenu>File</guimenu>
       <guisubmenu>Export</guisubmenu>
       <guimenuitem>&regina; Data File (Uncompressed)</guimenuitem>
      </menuchoice>
      will export the data as plain &xml; (which means you
      can view the &xml; in your favourite text editor),
      again using the new file format introduced with &regina;&nbsp;7.0.
      Note that &regina; can happily read data files in either compressed or
      uncompressed format.
     </para></listitem>
     <listitem><para>
      <menuchoice>
       <guimenu>File</guimenu>
       <guisubmenu>Export</guisubmenu>
       <guimenuitem>Legacy &regina; Data File (&le;&nbsp;6.0.1)</guimenuitem>
      </menuchoice>
      will export the data as compressed &xml; using the old file format
      from &regina;&nbsp;3.0&ndash;6.0.1.
     </para></listitem>
    </itemizedlist>
   </para>
   <para>
    If you simply want to view the raw &xml; content of an existing data
    file, you do not need to go to the trouble of exporting
    it in uncompressed format.
    Instead you can just pipe the data file through
    <command>gunzip</command>:
   </para>
<screen>
    <prompt>example$</prompt> <userinput>cat file.rga | gunzip</userinput>
</screen>
  </sect2>

  <sect2 id="export-snappea">
   <title>&snappea; Triangulations</title>

   <para>
    You can export a 3-manifold triangulation
    (either one of &regina;'s <link linkend="packet-triangulation3">native
    triangulations</link> or a hybrid
    <link linkend="packet-snappea">&snappea; triangulation</link>)
    to the file format used by &snappeapylink;.  This is a plain text format,
    and is described in more detail in the section on
    <link linkend="import-snappea">&snappea; imports</link>.
   </para>
   <para>
    Not every &regina; triangulation can be exported to &snappea; format.
    For instance, the triangulation cannot be
    <link linkend="tri-propvalid">invalid</link>,
    and it may not have any boundary triangles.
    &regina; will tell you if your triangulation cannot be exported.
   </para>
   <para>
    If you are exporting one of &regina;'s native
    <link linkend="packet-triangulation3">triangulation packets</link>,
    then &regina; will mark any &snappea;-specific information
    (such as fillings or peripheral curves) as unknown.
    If you are exporting one of &regina;'s hybrid
    <link linkend="packet-snappea">&snappea; triangulations</link>,
    then &regina; will include this extra &snappea;-specific
    information in the exported file.
   </para>
   <para>
    Any international characters in the exported &snappea; file will be
    encoded using &utf8;.
   </para>
  </sect2>

  <sect2 id="export-recogniser">
   <title>&recogniser; Triangulations</title>

   <para>
    You can export a 3-manifold triangulation
    (either one of &regina;'s <link linkend="packet-triangulation3">native
    triangulations</link> or a hybrid
    <link linkend="packet-snappea">&snappea; triangulation</link>)
    to a plain text file that can be
    given as input to Matveev's &recogniserlink;.
   </para>
   <para>
    As with the &snappea; format, not every data file can be exported to
    the &recogniser;.
    In particular, the triangulation cannot be
    <link linkend="tri-propvalid">invalid</link>,
    and it may not have any boundary triangles.
    &regina; will tell you if your triangulation cannot be exported.
   </para>
  </sect2>

  <sect2 id="export-csvsurfacelist">
   <title>Spreadsheet-Readable (&csv;) Surface Lists</title>

   <para>
    You can export a normal surface list to a plain-text
    &csv; file (comma-separated values), which you can easily
    import into a spreadsheet or database.
   </para>
   <para>
    The &csv; file will begin with a header row, followed
    by one line for each normal surface in the list.  Surfaces will be
    exported in standard coordinates
    (that is, <link linkend="surfaces-defstandard">tri-quad coordinates</link>
    for normal surfaces, or
    <link linkend="surfaces-defstandardan">tri-quad-oct coordinates</link>
    for almost normal surfaces).
    The fields in the &csv; file will mirror the columns that you see
    in the <link linkend="surfaces-coords">normal surface
    coordinate viewer</link>, and will include properties such as
    Euler characteristic and orientability as well as the
    surface coordinates themselves.
   </para>
   <para>
    If any of the surfaces have names that include
    international characters, these names will be exported in &utf8;.
   </para>
  </sect2>

  <sect2 id="export-pyscript">
   <title>&python; Scripts</title>

   <para>
    You can export a <link linkend="python-script">script packet</link>
    as a regular &python; file.
    &regina; will add a special comment block to the top of the file,
    describing the packet label and the script variables.
    This special comment block allows you to import the script
    seamlessly back into &regina;; see
    <link linkend="import-pyscript">&python; imports</link> for details.
   </para>
   <para>
    During the export, &regina; will tell you how it will write any
    international characters in the script (that is, letters or symbols
    not found on a typical English keyboard).  Such characters are
    stored using a <firstterm>text encoding</firstterm>, such as
    &utf8; (a popular modern standard and the default in &regina;),
    or &latin1; (which has a long history of use with many Western European
    languages).
    If you wish to use a different encoding, you will need to set this
    in <link linkend="options-encoding">&regina;'s options</link>.
    If you are not sure, the default of &utf8; is typically a good choice.
    If you only ever use letters or symbols found on a typical English keyboard,
    you do not need to worry about text encodings at all.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="i18n-export"/>
     </imageobject>
    </inlinemediaobject>
   </para>
  </sect2>
 </sect1>
</chapter>
