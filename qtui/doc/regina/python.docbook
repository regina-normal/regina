<chapter id="python">
 <title>&python; Scripting</title>

 <para>
  &regina; contains inbuilt scripting, which offers you fine control
  over &regina;'s mathematical engine and enables you to automate
  large amounts of processing.
  You can write and run scripts from
  directly within &regina;, or you can use the separate command-line tool
  <link linkend="man-regina-python"><command>regina-python</command></link>.
 </para>
 <para>
  The user interface will stay in sync with any changes that you
  make through a script, which means you can happily modify a
  data file via scripts while you have it open.
 </para>
 <para>
  All scripts in &regina; use the &python; programming language
  (<ulink url="http://www.python.org/"/>).
  The specific &python; version must be chosen at build time.
  If you download a ready-made package then the packager has already chosen
  the &python; version for you; the ready-made packages on the
  &regina; website will always use the default version of &python;
  on each system where possible.
 </para>
 <warning>
  <para>
   &regina;'s &python; interface typically assumes you know what you are
   doing, and so the onus is on you to follow the rules.
   All constraints, preconditions and so on are thoroughly documented in the
   <link linkend="python-docs">&api; documentation</link>.
   Probably the easiest way to crash &regina; is to bring up a &python;
   console and do something &ldquo;illegal&rdquo; (like gluing together
   two tetrahedra that belong to different triangulations).
  </para>
 </warning>

 <sect1 id="python-starting">
  <title>Starting a &python; Session</title>
  <para>
   There are several ways of starting a &python; session to work with
   &regina;:
  </para>

  <sect2 id="python-gui">
   <title>Graphical &python; Consoles</title>
   <para>
    You can open a graphical &python; console by selecting
    <menuchoice>
     <guimenu>Tools</guimenu>
     <guimenuitem>Python Console</guimenuitem>
    </menuchoice>
    from the menu (or by pressing the corresponding toolbar button).
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="menu-python"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    A new console window will open as illustrated below,
    with an input area down the bottom (see the red arrow) and a
    full history of the session in the main part of the window.
    You can save this history by selecting
    <menuchoice>
     <guimenu>Console</guimenu>
     <guimenuitem>Save Session</guimenuitem>
    </menuchoice>.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="python-console"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    When you start the &python; session, &regina; will set some special
    variables for you:
    <glosslist>
     <glossentry>
      <glossterm><varname>item</varname></glossterm>
      <glossdef>
       <para>
        If you have a packet selected in the tree when you start the
        &python; session,
        the variable <varname>item</varname> will refer to this packet
        (see the figure above for an example of this).
       </para>
       <para>
        Note that, if you later change your selection in the packet tree,
        the <varname>item</varname> variable will not change as a result.
       </para>
      </glossdef>
     </glossentry>
     <glossentry>
      <glossterm><varname>root</varname></glossterm>
      <glossdef><para>
       The variable <varname>root</varname> will refer to the hidden
       root at the top of your packet tree (this root is not visible in the
       user interface, but its top-level children are).
      </para></glossdef>
     </glossentry>
    </glosslist>
   </para>
   <para>
    You are welcome to use these variables to change
    packets in your data file (or even add, remove or rename packets):
    the graphical user interface will always stay in sync with any changes
    that you make via &python;.
   </para>
  </sect2>
  <sect2 id="python-cmdline">
   <title>Command-Line Sessions</title>
   <para>
    You can run the command-line program
    <link linkend="man-regina-python"><command>regina-python</command></link>
    without a graphical user interface at all.
    This will use the standard &python; interpreter.
    Since this is a text-based interface, you can also redirect
    input and output in the usual way (using &lt; and &gt; in your
    command shell).
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="regina-python"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    &macosx; users will find <command>regina-python</command>
    inside &regina;'s application bundle.  See the
    <link linkend="trouble-regina-python"><acronym>FAQ</acronym> entry</link>
    for details.
   </para>
   <para>
    &windows; users do not have the command-line
    <command>regina-python</command> at all, though they can still use
    <link linkend="python-gui">graphical &python; consoles</link> and
    <link linkend="python-script">script packets</link>.
   </para>
  </sect2>
  <sect2 id="python-script">
   <title>Script Packets</title>
   <para>
    You can create a new <link linkend="packet-script">script
    packet</link> in your data file.  Script packets allow you to save
    &python; scripts along with your data, and they give your scripts
    easy access to the packets inside your file.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="menu-newscript"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    When you open a script packet, you will see your &python; code in the lower
    part of the script editor, and a table of variables up the top.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="script-edit"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    You can add your own variables to this table, and set them to arbitrary
    packets within your data file.  &regina; will always set these variables
    to the corresponding packets before running your script.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="script-var"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    At the top of the script editor you will find buttons to compile
    and run your script.
    Compiling is optional: it merely gives you a chance to spot
    syntax errors as you go.
    When you press <guibutton>Run</guibutton>, &regina; will run your
    script in a new graphical &python; console.
    The console will be left open in case you wish to experiment further.
   </para>
   <para>
    <inlinemediaobject>
     <imageobject>
      <imagedata multires="script-run"/>
     </imageobject>
    </inlinemediaobject>
   </para>
   <para>
    Again, you are welcome to change packets in your data file via
    scripts (or even add, remove or rename packets):
    the graphical user interface will always stay in sync with any changes
    that your scripts make.
   </para>
  </sect2>
 </sect1>

 <sect1 id="python-access">
  <title>Accessing &regina; from &python;</title>
  <para>
   All of &regina;'s objects, classes and methods belong to the
   module called <parameter>regina</parameter>.
   For instance, the main 3-manifold triangulation class is
   <literal>regina.Triangulation3</literal>,
   the main knot/link class is <literal>regina.Link</literal>,
   and the main routine to read a data file is <literal>regina.open</literal>.
  </para>
  <sect2 id="python-autoimport">
   <title>Automatic Imports</title>
   <para>
    Whenever &regina; gives you access to &python; (either through a
    <link linkend="python-gui">graphical console</link>,
    a <link linkend="python-script">script packet</link>, or a
    <link linkend="python-cmdline"><command>regina-python</command>
    command-line session</link>),
    it will automatically import the <parameter>regina</parameter>
    module (i.e., &ldquo;<literal>import regina</literal>&rdquo;),
    and it will import all of &regina;'s objects,
    classes and methods into the current namespace
    (i.e., &ldquo;<literal>from regina import&nbsp;*</literal>&rdquo;).
    As a single exception, it will <emphasis>not</emphasis> import
    <literal>regina.open</literal>, so as to not hide &python;'s own
    <function>open()</function> function.
   </para>
   <para>
    This means, for instance, that you can create a new triangulation by just
    calling <literal>Triangulation3()</literal>, but to read a data file
    you should still call <literal>regina.open(filename)</literal>.
    For command-line sessions,
    if you wish to avoid the heavy-handed
    &ldquo;<literal>from regina import&nbsp;*</literal>&rdquo;, you can pass
    the option <option>--noautoimport</option>
    to <command>regina-python</command>
    (in which case you will need to use fully qualified names such as
    <literal>regina.Triangulation3()</literal>).
   </para>
  </sect2>
 </sect1>

 <sect1 id="python-docs">
  <title>&api; Documentation</title>
  <para>
   &regina; includes a complete &api; reference for its calculation engine,
   which describes in detail the objects, classes and methods that are
   available through &python;.
   To read this documentation, you can:
   <itemizedlist>
    <listitem>read the locally installed documentation by selecting
    <menuchoice>
     <guimenu>Help</guimenu>
     <guimenuitem>Python &api; Reference</guimenuitem>
    </menuchoice>;</listitem>
    <listitem>read it online through the
     <ulink url="https://regina-normal.github.io/engine-docs/">&regina;
     website</ulink>;</listitem>
    <listitem>read it inline from
    <link linkend="python-docstrings">within &python;</link>
     (see below).</listitem>
   </itemizedlist>
   Be aware that this &api; documentation is primarily written for &cpp;
   (the main language that &regina; is written in).  This means:
   <itemizedlist>
    <listitem>
     The documentation uses &cpp; notation and &cpp; types,
     though these are all translated in the natural way to &python;
     (e.g., <literal>std::string</literal> becomes a &python; string,
     and <literal>std::vector</literal> becomes a &python; list).
    </listitem>
    <listitem>
     Some functions differ in how they are called from &cpp;
     versus &python;.  In such cases you will see the &cpp; description,
     but there will also be a &ldquo;&python;&rdquo; paragraph explaining
     how things differ in &python;.
    </listitem>
   </itemizedlist>
   There are more issues that &python; users should be aware of;
   please do read the
   <ulink url="https://regina-normal.github.io/engine-docs/pythonapi.html">summary page in the &api; documentation</ulink>
   that outlines the main differences.
  </para>

  <sect2 id="python-docstrings">
   <title>Inline Documentation</title>
   <para>
    Since version;&nbsp;7.2, &regina; now provides &python; docstrings
    for all of its classes and functions.  This means that you can get help
    directly from the &python; prompt, as illustrated below.
   </para>
   <para>
    Be aware, however, that this documentation is extracted automatically
    from the hand-written &cpp; &api; documentation discussed above.
    Although great attention has been paid to making this extraction
    as useful and natural as possible, it is still automated.
    Therefore you will find:
    <itemizedlist>
     <listitem>The documentation still uses some &cpp; terminology
      (e.g., <literal>std::string</literal>, pointers and references,
      move semantics, etc.).</listitem>
     <listitem>Function arguments are often not named in the synopsis
      at the beginning of the docstring (you will see them called
      <literal>arg0</literal>, <literal>arg1</literal>, etc.).
      However, they <emphasis>are</emphasis> named in the detailed
      descriptions of the arguments that follow.</listitem>
     <listitem>Some functions differ in how they are called from &cpp;
      versus &python; (e.g., <literal>Tetrahedron3.face()</literal>, or
      <literal>Link.rewrite()</literal>).
      In these cases, the detailed hand-written argument descriptions will
      follow the &cpp; variant, but the initial synopsis will be written for
      &python;.  For clarity, here the arguments in the &python; synopsis
      <emphasis>will</emphasis> be named.
      Look also for a &ldquo;&python;&rdquo; paragraph that explains
      exactly how the &cpp; and &python; versions differ.</listitem>
     <listitem>Some parts of the documentation are not accessible at all
      through &python;, since they do not correspond to entities that
      hold docstrings (e.g., class constants such as
      <literal>Perm4::nPerms</literal>, or standalone pages such as the
      discussion on Seifert fibred space notation).</listitem>
    </itemizedlist>
    Ultimately, <emphasis>it is the &cpp; documentation that is
    authoritative</emphasis>, not the inline &python; documentation.
    Again, remember that you can always
    <ulink url='https://regina-normal.github.io/engine-docs/'>read
    the &cpp; documentation online</ulink>.
   </para>
   <para>
    An example of docstrings for member functions:
    <programlisting>&docstring1;</programlisting>
   </para>
   <para>
    An example of docstrings for classes:
    <programlisting>&docstring2;</programlisting>
   </para>
  </sect2>
 </sect1>

 <sect1 id="python-snappy">
  <title>Talking with &snappy;</title>
  <para>
   Since &regina;&nbsp;4.95, a default installation of
   &regina; can talk directly with a default installation of &snappy;
   on many platforms.
   This includes &macosx;&nbsp;10.7 or greater
   (if you installed the &snappy; app bundle in
   the usual <filename>Applications</filename> folder), and &linux;
   (if your &snappy; uses the default system &python; installation).
  </para>
  <para>
   Simply type <userinput>import snappy</userinput> from within any of
   &regina;'s &python; environments.  To send information back and forth
   between &regina; and &snappy;:
   <itemizedlist>
    <listitem><para>
     &regina;'s triangulation classes
     <classname>Triangulation3</classname> and
     <classname>SnapPeaTriangulation</classname> both have a
     <function>snapPea()</function> function, which gives a string that
     you can pass to &snappy;'s <classname>Manifold</classname> constructor.
    </para></listitem>
    <listitem><para>
     &snappy;'s <classname>Manifold</classname> class has a
     <function>_to_string()</function> function, which gives a string
     that you can pass to &regina;'s
     <classname>Triangulation3</classname> or
     <classname>SnapPeaTriangulation</classname> constructor.
    </para></listitem>
   </itemizedlist>
  </para>
  <para>
   Regarding fillings and peripheral curves:
   &regina; does not store fillings or peripheral curves for its own native
   <link linkend="packet-triangulation3">triangulation packets</link>,
   as represented by the <classname>Triangulation3</classname> class.
   However, it does store fillings and peripheral curves for its hybrid
   <link linkend="packet-snappea">&snappea; triangulation packets</link>,
   as represented by the <classname>SnapPeaTriangulation</classname> class.
   The trade-off is that the native <classname>Triangulation3</classname>
   class offers &regina;'s full fine-grained control over the triangulation,
   whereas the hybrid <classname>SnapPeaTriangulation</classname> class
   has a more limited (largely read-only) interface.
   <itemizedlist>
    <listitem><para>
     When sending data from &regina; to &snappy;,
     if your triangulation is of the class
     <classname>Triangulation3</classname>,
     then <function>Triangulation3.snapPea()</function> will
     create a &snappy; manifold in which all fillings and peripheral
     curves are marked as unknown.
     If your triangulation is of the class
     <classname>SnapPeaTriangulation</classname>,
     and if you already have fillings and peripheral curves stored on
     each cusp, then <function>SnapPeaTriangulation.snapPea()</function> will
     create a &snappy; manifold that preserves these.
    </para></listitem>
    <listitem><para>
     Conversely, when sending data from &snappy; to &regina;, you
     can choose to instantiate a triangulation using either the
     <classname>Triangulation3</classname> class or the
     <classname>SnapPeaTriangulation</classname> class.
     If you use the <classname>Triangulation3</classname> class then all
     fillings and peripheral curves will be lost.
     If you use the <classname>SnapPeaTriangulation</classname> class then
     fillings and peripheral curves will be preserved (but your interface
     will be more restricted).
    </para></listitem>
   </itemizedlist>
  </para>
  <para>
   If you wish to send the complement of a native &regina;
   <classname>Link</classname> to &snappy;,
   you can pass your link directly to the
   <classname>SnapPeaTriangulation</classname> constructor, which will
   preserve the peripheral curves from the link diagram; then you can
   pass this to &snappy; via
   <function>SnapPeaTriangulation.snapPea()</function> as above.
  </para>
  <para>
   Regarding the interface:
   the <classname>SnapPeaTriangulation</classname> class
   inherits from <classname>Triangulation3</classname>, and so you can
   use it anywhere that a read-only triangulation is expected (in particular,
   you can use it for enumerating vertex normal surfaces or angle structures).
   However, because <classname>SnapPeaTriangulation</classname> must
   maintain two synchronised copies of the triangulation (&regina;'s and
   &snappea;'s), it is essentially read-only: any attempt to modify the
   triangulation using &regina;'s native routines (e.g.,
   <function>pachner()</function> or
   <function>barycentricSubdivision()</function>) will cause the
   &snappea; triangulation to delete itself and become a
   &ldquo;null triangulation&rdquo; instead.
  </para>
  <warning><para>
   At present, &snappy; (version&nbsp;2.0.3) is not compatible with
   multiple &python; interpreters.  If you import &snappy; into more than one
   &python;
   console in the graphical user interface, &snappy; may stop working.
   See <link linkend="trouble-python-snappy">this troubleshooting entry</link>
   for details.
  </para></warning>
  <para>
   The following &python; session illustrates several of the concepts
   discussed above.
  </para>
  <programlisting>
bab@ember:~$ regina-python 
Regina 7.2
Software for low-dimensional topology
Copyright (c) 1999-2022, The Regina development team
&gt;&gt;&gt; import snappy
&gt;&gt;&gt; m = snappy.Manifold('m001')
&gt;&gt;&gt; t = SnapPeaTriangulation(m._to_string())
&gt;&gt;&gt; print t.detail()
Size of the skeleton:
  Tetrahedra: 2
  Triangles: 4
  Edges: 2
  Vertices: 1

Tetrahedron gluing:
  Tet  |  glued to:      (012)      (013)      (023)      (123)
  -----+-------------------------------------------------------
    0  |               1 (103)    1 (320)    1 (210)    1 (132)
    1  |               0 (320)    0 (102)    0 (310)    0 (132)

Vertices:
  Tet  |  vertex:    0   1   2   3
  -----+--------------------------
    0  |             0   0   0   0
    1  |             0   0   0   0

Edges:
  Tet  |  edge:   01  02  03  12  13  23
  -----+--------------------------------
    0  |           0   1   1   1   1   0
    1  |           0   1   1   1   1   0

Triangles:
  Tet  |  face:  012 013 023 123
  -----+------------------------
    0  |           0   1   2   3
    1  |           2   0   1   3

Tetrahedron shapes:
  0: ( -1.60812e-16, 1 )
  1: ( -1.60812e-16, 1 )

Cusps:
  0: Vertex 0, complete

&gt;&gt;&gt; print t.hasStrictAngleStructure()
True
&gt;&gt;&gt; print AngleStructures(t).detail()
4 vertex angle structures (no restrictions):
0 1 0 ; 1 0 0
0 0 1 ; 1 0 0
1 0 0 ; 0 1 0
1 0 0 ; 0 0 1

&gt;&gt;&gt; t2 = Example3.figureEight()
&gt;&gt;&gt; m2 = snappy.Manifold(t2.snapPea())
&gt;&gt;&gt; print m2.volume()
2.02988321282
&gt;&gt;&gt;
  </programlisting>
 </sect1>

 <sect1 id="sessions">
  <title>Sample &python; Sessions</title>
  <para>
   Several sample &python; sessions are reproduced below.
   Each session was started by running
   <userinput>regina-python</userinput>
   from the command line.
  </para>

  <sect2 id="sessiontriangulation">
   <title>Working with a triangulation</title>
   <programlisting>&sessiontriangulation;</programlisting>
  </sect2>

  <sect2 id="sessiontree">
   <title>Working with a packet tree</title>
   <programlisting>&sessiontree;</programlisting>
  </sect2>

  <sect2 id="sessionprogress">
   <title>Reporting progress of long operations</title>
   <programlisting>&sessionprogress;</programlisting>
  </sect2>
 </sect1>
</chapter>
