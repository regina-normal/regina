<appendix id="utils">
 <title>Command Line: Specialised Utilities</title>

 <para>
  The main applications <command>regina-gui</command> and
  <command>regina-python</command> are documented in the
  <link linkend="manpages">previous chapter</link>.
  This chapter documents the more specialised command-line
  utilities that &regina; provides.
 </para>

 <!-- File Concatenator -->

 <refentry id="man-censuslookup">
  <refmeta>
   <refentrytitle>censuslookup</refentrytitle>
   <manvolnum>1</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>censuslookup</refname>
   <refpurpose>Search for triangulations in &regina;'s census databases</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <cmdsynopsis>
    <command>censuslookup</command>
    <arg rep="repeat" choice="req"><replaceable>isosig</replaceable></arg>
   </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>
   <para>
    This utility searches for the given 3-manifold triangulations in the various
    census databases that are shipped with&regina;.
   </para>
   <para>
    You should present the trianguations using their <firstterm>isomorphism
    signatures</firstterm>.  These are short text strings that identify
    the triangulation uniquely up to combinatorial isomorphism
    (i.e., up to relabellings of the tetrahedra and/or their vertices).
   </para>
   <para>
    From the graphical user interface, you can view the isomorphism signature
    of a triangulation by switching to the <guilabel>Composition</guilabel>
    tab in the triangulation viewer.  From &python; you can fetch the
    isomorphism signature of the triangulation <userinput>x</userinput>
    by calling <userinput>x.isoSig()</userinput>.
    For a full and precise specification of isomorphism signatures, see
    <emphasis>Simplification paths in the Pachner graphs of closed
    orientable 3-manifold triangulations</emphasis>, Burton, 2011,
    arXiv:1110.6080.
   </para>
   <para>
    All database matches (if any) will be written to standard output.
   </para>
  </refsect1>

  <refsect1>
   <title>Environment Variables</title>
   <para>
    The following environment variables influence the behaviour of
    this program.
   </para>
   <variablelist>
    <varlistentry>
     <term><parameter>REGINA_HOME</parameter></term>
     <listitem>
      <para>
       The directory beneath which &regina;'s data files are installed.
       This utility will look for the census databases in the subdirectory
       <filename><parameter>$REGINA_HOME</parameter>/data/census/</filename>.
      </para>
      <para>
       Normally you should not need to set this option yourself.
       This utility should know how to find its census databases in standard
       situations, which include
       fixed filesystem installations (e.g., &linux; and &windows;),
       relocatable app bundles (e.g., &macosx;),
       and running directly from the source tree.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Example</title>

<screen>
    <prompt>example$</prompt> <userinput>censuslookup fvPQcdecedekrsnrs dLQbcccajqs cPcbbbiht</userinput>
    fvPQcdecedekrsnrs: 1 hit
        SFS [S2: (2,1) (3,1) (5,-4)] : #1 -- Closed census (orientable)

    dLQbcccajqs: 0 hits

    cPcbbbiht: 2 hits
        m004 : #1 -- Cusped hyperbolic census (orientable)
        L104001 -- Hyperbolic knot and link complements

    <prompt>example$</prompt>
</screen>
  </refsect1>

  <refsect1>
   <title>&macosx; Users</title>
   <para>
    If you downloaded a drag-and-drop app bundle, this utility is
    shipped inside it.  If you dragged &regina; to the main
    <guilabel>Applications</guilabel> folder, you can run it as
    <literal>/Applications/Regina.app/Contents/MacOS/censuslookup</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>&windows; Users</title>
   <para>
    The command-line utilities are installed beneath the
    <filename>Program&nbsp;Files</filename> directory; on some
    machines this directory is called
    <filename>Program&nbsp;Files&nbsp;(x86)</filename>.
    You can start this utility by running
    <literal>c:\Program&nbsp;Files\Regina\Regina&nbsp;&regversion;\bin\censuslookup.exe</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>See Also</title>
   <para>
    <link linkend="man-regina-gui">regina-gui</link>.
    <link linkend="man-trisetcmp">trisetcmp</link>,
   </para>
  </refsect1>

  <refsect1>
   <title>Author</title>
   <para>
    This utility was written by Benjamin Burton
    <email>bab@maths.uq.edu.au</email>.
    &manpageack;
   </para>
  </refsect1>
 </refentry>

 <!-- DGT -->

 <refentry id="man-dgt">
  <refmeta>
   <refentrytitle>dgt</refentrytitle>
   <manvolnum>1</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>dgt</refname>
   <refpurpose>Triangulate a 3-manifold or 4-manifold from a framed link</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <cmdsynopsis>
    <command>dgt</command>
    <group choice="req">
     <arg><option>-3, --dim3</option></arg>
     <arg><option>-4, --dim4</option></arg>
    </group>
    <arg><option>-g, --graph</option></arg>
    <arg><option>-r, --real</option></arg>
   </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>
   <para>
    This utility builds a triangulation or coloured graph of a
    3-manifold or 4-manifold from a framed link.
   </para>
   <para>
    For 3-manifolds, the manifold constructed is the one obtained by
    performing integer Dehn surgery on the given link.
   </para>
   <para>
    For 4-manifolds, the manifold constructed is the one obtained by attaching
    4-dimensional 2-handles to the 4-ball along the framed link components.
   </para>
   <para>
    When you run &dgt;, it will ask you to input the underlying (unframed)
    link at the console.  This link should be given in the format of a
    Planar Diagram (PD) code, specifically, in the same format as used by
    &snappy;. The simplest way to achieve this is to draw the link in &snappy;'s
    &plink; editor, and copy the PD code generated by &snappy; via the
    <menuchoice><guimenu>Info</guimenu><guimenuitem>PD Code</guimenuitem></menuchoice>
    menu option in the editor.
   </para>
   <warning>
    <para>
     Do not include the <literal>PD:</literal> text preceding the
     code generated by the &plink; editor in the input to &dgt;.
     Only copy and input the code itself, which starts at the left square
     bracket and terminates with the right square bracket.
    </para>
   </warning>
   <para>
    For more information, see the full &dgt; manual, available from
    <ulink url='https://raburke.github.io/'></ulink>.
   </para>
  </refsect1>

  <refsect1>
   <title>Options</title>
   <variablelist>
    <varlistentry>
     <term><option>-3, --dim3</option></term>
     <listitem>
      <para>
       Build the 3-manifold obtained from integer Dehn surgery on the
       input link.
      </para>
      <para>
       One of <option>--dim3</option> or <option>--dim4</option> must be
       given as a command-line argument.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-4, --dim4</option></term>
     <listitem>
      <para>
       Build the 4-manifold obtained by attaching 2-handles along the
       components of the framed link to the 4-ball.
      </para>
      <para>
       One of <option>--dim3</option> or <option>--dim4</option> must be
       given as a command-line argument.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-g, --graph</option></term>
     <listitem>
      <para>
       Output an edge list of the edge-coloured graph associated to the
       manifold. Each node of the graph corresponds to a tetrahedron in the
       case of 3-manifolds or to a pentachoron in the case of 4-manifolds.
       Two nodes are connected by a <replaceable>c</replaceable>-coloured
       edge if the two corresponding top-dimensional simplices of the
       triangulation have the facets opposite to the vertex labelled
       <replaceable>c</replaceable> identified.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-r, --real</option></term>
     <listitem>
      <para>
       For 4-manifolds, this option will build the triangulation with
       real boundary.
      </para>
      <para>
       By default, if the manifold does not have boundary &s3;,
       it will be built with ideal boundary. If the manifold has boundary
       &s3;, then the resulting triangulation will be capped off to
       produce a closed manifold.
      </para>
      <para>
       This option will be ignored for 3-manifolds, as all 3-manifolds
       built from this construction are closed.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Examples</title>

   <para>
    The following builds the &poincare; homology 3-sphere obtained by
    +1 surgery along the right handed trefoil knot.
   </para>

<screen>
    <prompt>example$</prompt> <userinput>dgt -3</userinput>
    Enter PD Code of Diagram: <userinput>[(6,4,1,3),(4,2,5,1),(2,6,3,5)]</userinput>

    Writhe of
    Component 0: 3
    Enter integer framings for 2-handles (same order as in SnapPy's PLink Editor):
    <userinput>1</userinput>
    Self-framing component 0...
    Link should now be self-framed: writhe(component) = framing(component)...
    Writhe of
    Component 0: 1

    1     Generating Negative Curl of Type A (x,x,z,w)...
    2     Generating Negative Curl of Type A (x,x,z,w)...
    3     Generating Positive Crossing...
    4     Generating Positive Crossing...
    5     Generating Positive Crossing...

    Here is the isomorphism signature:
    GLvvQvPvALvzMAQAvAQQQPccgfekjpmswxtvywzrxyDABABCEDBCEFFFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    <prompt>example$</prompt>
</screen>

   <para>
    The following builds the complex projective plane by attaching a single
    2-handle to the 4-ball along a +1 framed unknot.
   </para>

<screen>
    <prompt>example$</prompt> <userinput>dgt -4</userinput>
    Enter PD Code of Diagram: <userinput>[(1,1,2,2)]</userinput>

    Writhe of
    Component 0: 1
    Enter integer framings for 2-handles (same order as in SnapPy's PLink Editor):
    <userinput>1</userinput>
    Adding additional pair of cancelling curls to component 0 to guarantee existence of a quadricolour...
    Link should now be self-framed: writhe(component) = framing(component)...
    Writhe of
    Component 0: 1

    1     Generating Negative Curl of Type A (x,x,z,w)...
    2     Generating Positive Curl of Type A (x,y,y,w)...
    3     Generating Positive Curl of Type A (x,y,y,w)...

    Performing 1 quadricolour substitution...

    If manifold has (non-spherical) boundary, resulting triangulation will have ideal boundary.
    If manifold has spherical boundary, manifold will be capped off to produce a closed manifold.

    Here is the isomorphism signature:
    mLvAwAQAPQQcfffhijgjgjkkklklllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    <prompt>example$</prompt>
</screen>
  </refsect1>

  <refsect1>
   <title>&macosx; Users</title>
   <para>
    If you downloaded a drag-and-drop app bundle, this utility is
    shipped inside it.  If you dragged &regina; to the main
    <guilabel>Applications</guilabel> folder, you can run it as
    <literal>/Applications/Regina.app/Contents/MacOS/dgt</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>&windows; Users</title>
   <para>
    The command-line utilities are installed beneath the
    <filename>Program&nbsp;Files</filename> directory; on some
    machines this directory is called
    <filename>Program&nbsp;Files&nbsp;(x86)</filename>.
    You can start this utility by running
    <literal>c:\Program&nbsp;Files\Regina\Regina&nbsp;&regversion;\bin\dgt.exe</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>Author</title>
   <para>
    This utility was written by Rhuaidi Burke
    <email>rhuaidi.burke@uq.edu.au</email>.
    &manpageack;
   </para>
  </refsect1>
 </refentry>

 <refentry id="man-regconcat">
  <refmeta>
   <refentrytitle>regconcat</refentrytitle>
   <manvolnum>1</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>regconcat</refname>
   <refpurpose>Combine several &regina; data files</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <cmdsynopsis>
    <command>regconcat</command>
    <arg><option>-o</option> <replaceable>output-file</replaceable></arg>
    <arg rep="repeat" choice="req"><replaceable>input-file</replaceable></arg>
   </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>
   <para>
    This utility combines several individual &regina; data files into
    a single larger data file.  The new file will have a container as its
    top-level packet, and beneath this container will be the packet trees
    from each of the input files that you supply.
   </para>
   <para>
    If an output file is specified through option <option>-o</option>,
    the new file will be written as compressed &xml; to this output file.
    Otherwise the new file will be written as uncompressed &xml; to
    standard output.
   </para>
  </refsect1>

  <refsect1>
   <title>Options</title>
   <variablelist>
    <varlistentry>
     <term><option>-o</option> <replaceable>output-file</replaceable></term>
     <listitem>
      <para>
       Specifies that the new combined data file should be written
       as compressed &xml; to the given output file.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>&macosx; Users</title>
   <para>
    If you downloaded a drag-and-drop app bundle, this utility is
    shipped inside it.  If you dragged &regina; to the main
    <guilabel>Applications</guilabel> folder, you can run it as
    <literal>/Applications/Regina.app/Contents/MacOS/regconcat</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>&windows; Users</title>
   <para>
    The command-line utilities are installed beneath the
    <filename>Program&nbsp;Files</filename> directory; on some
    machines this directory is called
    <filename>Program&nbsp;Files&nbsp;(x86)</filename>.
    You can start this utility by running
    <literal>c:\Program&nbsp;Files\Regina\Regina&nbsp;&regversion;\bin\regconcat.exe</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>See Also</title>
   <para>
    <link linkend="man-regina-gui">regina-gui</link>.
   </para>
  </refsect1>

  <refsect1>
   <title>Author</title>
   <para>
    This utility was written by Benjamin Burton
    <email>bab@maths.uq.edu.au</email>.
    &manpageack;
   </para>
  </refsect1>
 </refentry>

 <!-- File Converter -->

 <refentry id="man-regconvert">
  <refmeta>
   <refentrytitle>regconvert</refentrytitle>
   <manvolnum>1</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>regconvert</refname>
   <refpurpose>Convert between different &regina; file formats</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <cmdsynopsis>
    <command>regconvert</command>
    <group>
     <arg><option>-2</option></arg>
     <arg><option>-3</option></arg>
    </group>
    <group>
     <arg><option>-x</option></arg>
     <arg><option>-u</option></arg>
    </group>
    <arg choice="req"><replaceable>old-file</replaceable></arg>
    <arg><replaceable>new-file</replaceable></arg>
   </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>
   <para>
    This utility converts back and forth between different &regina;
    file formats.
   </para>
   <para>
    &regina;'s file formats include:
    <glosslist>
     <glossentry>
      <glossterm>Third-generation &xml;</glossterm>
      <glossdef><para>
       This is the modern &xml; format introduced in &regina;&nbsp;7.0.
       Older versions of &regina; (6.0.1 and below) cannot read it at all.
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm>Second-generation &xml;</glossterm>
      <glossdef><para>
       This is the original &xml; format that was used in
       &regina;&nbsp;3.0&ndash;6.0.1 (from 2002&ndash;2021).
       Current versions of &regina; can still read and write this format
       if required.
      </para></glossdef>
     </glossentry>
     <glossentry>
      <glossterm>First-generation binary format</glossterm>
      <glossdef><para>
       This is the ancient binary format that was used in &regina;&nbsp;2.x
       (from 2000&ndash;2002).
       Support for this format was dropped completely in September&nbsp;2013,
       and modern versions of &regina; cannot read or write it.
      </para><para>
       If you still have ancient files that use this format, you will need to
       find a copy of &regina;&nbsp;3.0&ndash;4.93 (from 2002&ndash;2012),
       which can convert these old binary files to the second-generation
       &xml; format.
      </para></glossdef>
     </glossentry>
    </glosslist>
   </para>
   <para>
    The argument <replaceable>old-file</replaceable> should be the file to
    read and convert; the argument <replaceable>new-file</replaceable> should
    be the name of the new converted file to write.  These two filenames
    may be the same, in which case the old file will be replaced with the new.
   </para>
   <para>
    If the argument <replaceable>new-file</replaceable> is missing then the
    new file will be written to standard output, which forces the output to be
    uncompressed &xml; (see option <option>-u</option>).
   </para>
  </refsect1>

  <refsect1>
   <title>Options</title>
   <variablelist>
    <varlistentry>
     <term><option>-2</option></term>
     <listitem>
      <para>Convert to the older second-generation &xml; format,
       as used in &regina;&nbsp;3.0&ndash;6.0.1.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-3</option> (default)</term>
     <listitem>
      <para>Convert to the modern third-generation &xml; format,
       introduced in &regina;&nbsp;7.0.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-x</option> (default)</term>
     <listitem>
      <para>Write the output as compressed &xml;.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-u</option></term>
     <listitem>
      <para>Write the output as uncompressed (plain text) &xml;.</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>&macosx; Users</title>
   <para>
    If you downloaded a drag-and-drop app bundle, this utility is
    shipped inside it.  If you dragged &regina; to the main
    <guilabel>Applications</guilabel> folder, you can run it as
    <literal>/Applications/Regina.app/Contents/MacOS/regconvert</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>&windows; Users</title>
   <para>
    The command-line utilities are installed beneath the
    <filename>Program&nbsp;Files</filename> directory; on some
    machines this directory is called
    <filename>Program&nbsp;Files&nbsp;(x86)</filename>.
    You can start this utility by running
    <literal>c:\Program&nbsp;Files\Regina\Regina&nbsp;&regversion;\bin\regconvert.exe</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>See Also</title>
   <para>
    <link linkend="man-regfiletype">regfiletype</link>,
    <link linkend="man-regina-gui">regina-gui</link>.
   </para>
  </refsect1>

  <refsect1>
   <title>Author</title>
   <para>
    This utility was written by Benjamin Burton
    <email>bab@maths.uq.edu.au</email>.
    &manpageack;
   </para>
  </refsect1>
 </refentry>

 <!-- File Dumper -->

 <refentry id="man-regfiledump">
  <refmeta>
   <refentrytitle>regfiledump</refentrytitle>
   <manvolnum>1</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>regfiledump</refname>
   <refpurpose>Dump the contents of a &regina; data file</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <cmdsynopsis>
    <command>regfiledump</command>
    <group>
     <arg><option>-f</option></arg>
     <arg><option>-l</option></arg>
     <arg><option>-n</option></arg>
    </group>
    <arg><option>-c</option></arg>
    <arg choice="req"><replaceable>file</replaceable></arg>
    <arg rep="repeat"><replaceable>packet-label</replaceable></arg>
   </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>
   <para>
    This utility dumps the contents of the given &regina; data file to
    standard output in a human-readable format.
   </para>
   <para>
    If a list of packet labels is given on the command-line, only those
    packets will be output.  Otherwise all packets in the given
    file will be output.
   </para>
  </refsect1>

  <refsect1>
   <title>Options</title>
   <variablelist>
    <varlistentry>
     <term><option>-f</option> (default)</term>
     <listitem>
      <para>
       Output full packet details.  The output for each packet will cover
       several lines, beginning with basic details (such as the packet label
       and type) followed by the packet's long description.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-l</option></term>
     <listitem>
      <para>
       Output a list of packet labels and types only, one packet per line.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-n</option></term>
     <listitem>
      <para>
       Don't output any packets at all; this option forces a packet
       count (see option <option>-c</option>).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-c</option></term>
     <listitem>
      <para>Finish the output with a total count of all packets in the
       file.</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  &submani18n;

  <refsect1>
   <title>&macosx; Users</title>
   <para>
    If you downloaded a drag-and-drop app bundle, this utility is
    shipped inside it.  If you dragged &regina; to the main
    <guilabel>Applications</guilabel> folder, you can run it as
    <literal>/Applications/Regina.app/Contents/MacOS/regfiledump</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>&windows; Users</title>
   <para>
    The command-line utilities are installed beneath the
    <filename>Program&nbsp;Files</filename> directory; on some
    machines this directory is called
    <filename>Program&nbsp;Files&nbsp;(x86)</filename>.
    You can start this utility by running
    <literal>c:\Program&nbsp;Files\Regina\Regina&nbsp;&regversion;\bin\regfiledump.exe</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>See Also</title>
   <para>
    <link linkend="man-regina-gui">regina-gui</link>.
   </para>
  </refsect1>

  <refsect1>
   <title>Author</title>
   <para>
    This utility was written by Benjamin Burton
    <email>bab@maths.uq.edu.au</email>.
    &manpageack;
   </para>
  </refsect1>
 </refentry>

 <!-- File Identifier -->

 <refentry id="man-regfiletype">
  <refmeta>
   <refentrytitle>regfiletype</refentrytitle>
   <manvolnum>1</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>regfiletype</refname>
   <refpurpose>Identify the formats of &regina; data files</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <cmdsynopsis>
    <command>regfiletype</command>
    <arg choice="req" rep="repeat"><replaceable>file</replaceable></arg>
   </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>
   <para>
    This utility determines which file format a given
    &regina; data file is in.
    You may pass multiple files on the command line; the format of each
    file will be written to standard output.
   </para>
   <para>
    Only &regina;'s modern &xml;-based file formats are recognised
    (both compressed and uncompressed).
    In its very early years, &regina; used an impenetrable and undocumented
    binary format; this was replaced with &xml; in 2002 (&regina;&nbsp;3.0),
    and support for this format was removed completely in 2013
    (&regina;&nbsp;4.94).
    If you still need to recognise and/or read files in this ancient binary
    format, you will need to download &regina;&nbsp;4.93.
   </para>
  </refsect1>

  <refsect1>
   <title>&macosx; Users</title>
   <para>
    If you downloaded a drag-and-drop app bundle, this utility is
    shipped inside it.  If you dragged &regina; to the main
    <guilabel>Applications</guilabel> folder, you can run it as
    <literal>/Applications/Regina.app/Contents/MacOS/regfiletype</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>&windows; Users</title>
   <para>
    The command-line utilities are installed beneath the
    <filename>Program&nbsp;Files</filename> directory; on some
    machines this directory is called
    <filename>Program&nbsp;Files&nbsp;(x86)</filename>.
    You can start this utility by running
    <literal>c:\Program&nbsp;Files\Regina\Regina&nbsp;&regversion;\bin\regfiletype.exe</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>See Also</title>
   <para>
    <link linkend="man-regconvert">regconvert</link>,
    <link linkend="man-regina-gui">regina-gui</link>.
   </para>
  </refsect1>

  <refsect1>
   <title>Author</title>
   <para>
    This utility was written by Benjamin Burton
    <email>bab@maths.uq.edu.au</email>.
    &manpageack;
   </para>
  </refsect1>
 </refentry>

 <!-- Retriangulation -->

 <refentry id="man-retriangulate">
  <refmeta>
   <refentrytitle>retriangulate</refentrytitle>
   <manvolnum>1</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>retriangulate</refname>
   <refpurpose>Exhaustively search through triangulations or knot diagrams using local moves</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <cmdsynopsis>
    <command>retriangulate</command>
    <arg><option>-h, --height=</option><replaceable>height</replaceable></arg>
    <arg><option>-t, --threads=</option><replaceable>threads</replaceable></arg>
    <group>
     <arg><option>-3, --dim3</option></arg>
     <arg><option>-4, --dim4</option></arg>
     <arg><option>-k, --knot</option></arg>
    </group>
    <arg><option>-a, --anysig</option></arg>
    <arg><option>--</option></arg>
    <arg choice="req"><replaceable>signature</replaceable></arg>
   </cmdsynopsis>
   <cmdsynopsis>
    <command>retriangulate</command>
    <arg choice="req"><option>--help</option></arg>
   </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>
   <para>
    Given a 3-manifold triangulation, 4-manifold triangulation or knot diagram,
    this utility uses local moves to exhaustively search for other
    triangulations/diagrams of the same manifold/knot that are the
    same size or smaller.
    Here &ldquo;local moves&rdquo; means Pachner moves for
    triangulations, or Reidemeister moves for knots.
   </para>
   <para>
    Specifically, suppose the input triangulation or knot diagram contains
    <replaceable>n</replaceable> tetrahedra/pentachora/crossings
    (for a 3-manifold, 4-manifold or knot respectively).
    Then this utility will
    exhaustively modify the triangulation or knot diagram using local moves,
    without ever exceeding
    <replaceable>n</replaceable>&nbsp;+&nbsp;<replaceable>height</replaceable>
    tetrahedra/pentachora/crossings in total.
    Moreover, all such triangulations/diagrams are guaranteed to be found, each
    once and only once (up to an appropriate notion of
    combinatorial isomorphism).
   </para>
   <para>
    For 3-manifold triangulations, this utility will only attempt 2-3
    and 2-3 Pachner moves, never 1-4 or 4-1 moves.
    For 4-manifold triangulations or knot diagrams, it will use all types of
    Pachner moves or Reidemeister moves respectively.
   </para>
   <para>
    The input is assumed to represent a 3-manifold
    triangulation unless one of the options <option>--dim4</option> or
    <option>--knot</option> is passed.
   </para>
   <para>
    The program will output each triangulation or knot diagram that it finds
    of the same size <replaceable>n</replaceable> (including the original input
    triangulation/diagram).  If it ever finds a
    <emphasis>smaller</emphasis> triangulation or diagram (thereby proving the
    original to be non-minimal), it will output that smaller
    triangulation/diagram and then stop immediately.  Otherwise it will continue
    outputting triangulations or diagrams of size <replaceable>n</replaceable>
    until no more can be found.  Although the program also finds larger
    triangulations/diagrams as part of its exhaustive search using local moves,
    these larger triangulations/diagrams (of which there are typically many)
    will not be output at all.
   </para>
   <para>
    All triangulations or knot diagrams, both input and output, are described
    using <firstterm>isomorphism signatures</firstterm> and
    <firstterm>knot signatures</firstterm> respectively.  These are short text
    strings that identify a triangulation or knot diagram uniquely up to
    combinatorial isomorphism (which includes relabellings of
    tetrahedra/pentachora/crossings, relabellings of the vertices of
    tetrahedra/pentachora vertices, and reflection/reversal of knot diagrams).
   </para>
   <para>
    To view the isomorphism signature of a triangulation:
    in &regina;'s graphical user interface you can find this in the
    <guilabel>Composition</guilabel> tab in the triangulation viewer,
    and in &python; you can call <userinput>t.isoSig()</userinput>
    for a triangulation <userinput>t</userinput>.
    To view a knot signature:
    in &regina;'s graphical user interface this is available through the
    <guilabel>Codes</guilabel> tab in the knot/link viewer,
    and in &python; you can call <userinput>k.knotSig()</userinput>
    for a knot <userinput>k</userinput>.
   </para>
   <para>
    For a full and precise specification of isomorphism signatures for
    3-manifolds, see
    <emphasis>Simplification paths in the Pachner graphs of closed
    orientable 3-manifold triangulations</emphasis>, Burton, 2011,
    arXiv:1110.6080.
   </para>
   <tip>
    <para>
     Very large triangulations or knots have signatures that begin with a dash
     (<literal>-</literal>).  Such a signature could be mistaken for an option
     when passing it on the command line.  To avoid this, you can pass the
     special option <option>--</option> immediately before it: this indicates
     that all command-line options have finished, and whatever comes next should
     be treated as the input signature.
    </para>
<screen>
    <prompt>example$</prompt> <userinput>retriangulate -h1 -- -b-LLvALwvM...</userinput>
</screen>
   <!-- full sig is -b-LLvALwvMvzwvwvvzQvLPPQAQQQQAvLvMwzPQLQPQQQcehhkkppuurAwBADIzLBKQACQIJHFGGHHSRKRSQVXSW1X53756484294+598+79+aaaaaaaaaaafovfgtfubuqfbhaanjrkrscrcjvnaasgfollaliahabueelggnobs -->
   </tip>
  </refsect1>

  <refsect1>
   <title>Options</title>
   <variablelist>
    <varlistentry>
     <term><option>-h,
      --height=</option><replaceable>height</replaceable></term>
     <listitem>
      <para>
       Specifies the number of additional tetrahedra, pentachora or
       crossings (for a 3-manifold, 4-manifold or knot respectively)
       that we allow during intermediate stages of retriangulation.
       That is, if the input triangulation or knot diagram
       has <replaceable>n</replaceable> tetrahedra/pentachora/crossings, then
       this utility will exhaustively search through all triangulations
       or knot diagrams that it can reach via local moves that do not exceed
       <replaceable>n</replaceable>&nbsp;+&nbsp;<replaceable>height</replaceable>
       tetrahedra/pentachora/crossings in total.
      </para>
      <para>
       Note that these larger intermediate triangulations or diagrams will not
       be written to output; however, a larger height may allow the program
       to access additional <emphasis>smaller</emphasis> triangulations
       or diagrams that were otherwise inaccessible.
      </para>
      <para>
       The given height must be a non-negative integer.
       In addition, for 3-manifolds it must be strictly positive, and
       for 4-manifolds it must be even.
      </para>
      <para>
       If not specified, this option defaults to 1 when working with
       3-manifolds or knot diagrams, and it defaults to 2 when working
       with 4-manifolds.
      </para>
      <warning>
       <para>
        In general, the running time can grow
        <emphasis>superexponentially</emphasis> with
        <replaceable>height</replaceable>.  It is strongly suggested
        that you begin with <literal>--height=1</literal> (or 2 for
        4-manifolds) and increase it one step at a time until the
        performance becomes unacceptable.
       </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-t,
      --threads=</option><replaceable>threads</replaceable></term>
     <listitem>
      <para>
       Specifies the degree to which this utility uses parallel processing.
       Specifically, this program will use
       <replaceable>threads</replaceable> simultaneous threads of execution
       as it works its way through the different retriangulations or diagrams
       of the input manifold or knot.
      </para>
      <para>
       This program is typically able to use parallelism effectively,
       and so running with <replaceable>k</replaceable> threads should
       approximately divide the running time by <replaceable>k</replaceable>.
      </para>
      <para>
       If not specified, this option defaults to 1
       (i.e., single-threaded processing, with no parallelism).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-3, --dim3</option> (default)</term>
     <listitem>
      <para>
       Indicates that the given signature is the isomorphism signature of a
       3-manifold triangulation.  The local moves used will be 2-3 and 3-2
       Pachner moves.
      </para>
      <para>
       This is the default if none of the
       arguments <option>--dim3</option>, <option>--dim4</option> or
       <option>--knot</option> is passed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-4, --dim4</option></term>
     <listitem>
      <para>
       Indicates that the given signature is the isomorphism signature of a
       4-manifold triangulation.  The local moves used will be 1-5, 2-4, 3-3,
       4-2 and 5-1 Pachner moves.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-k, --knot</option></term>
     <listitem>
      <para>
       Indicates that the given signature is a knot signature.
       The local moves used will be the Reidemeister moves.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-a, --anysig</option></term>
     <listitem>
      <para>
       Indicates that the output is not required to be
       classic isomorphism signatures.
      </para>
      <para>
       &regina;&nbsp;7.0 introduced alternate <emphasis>types</emphasis>
       of isomorphism signatures.  Like the original isomorphism signatures
       that were introduced many years earlier, each type of signature
       uniquely identifies a triangulation up to combinatorial isomorphism.
       Moreover, &regina; can reconstruct a triangulation or link from a
       signature of any type.
      </para>
      <para>
       Internally, this utility uses one of the newer, alternate types
       of signature that is faster to compute.  However, it still outputs
       <emphasis>classic signatures</emphasis>; that is, the same isomorphism
       signatures that were originally introduced back in 2011.  This
       conversion from alternate to classic signatures adds extra overhead
       to the running time.
      </para>
      <para>
       If you pass the option <option>--anysig</option>, &regina; will
       not convert its output back to classic signatures; instead it will
       output whatever alternate signature type it uses internally.
       This will be faster, and you can still use these alternate
       signatures to reconstruct triangulations; the only reason
       <emphasis>not</emphasis> to do this is if you neeed to ensure
       compatibility with the original classical signatures (e.g., for
       matching against a list of signatures that was generated elsewhere).
      </para>
      <warning><para>
       The internal signature type is subject to change in future versions
       of &regina;.  That is, if you do use <option>--anysig</option>,
       then you may get different output depending upon which version of
       &regina; you are using.
      </para></warning>
      <note><para>
       Currently &regina; only uses alternate signature types with
       triangulations.  For knot signatures, it still uses
       classic signatures, though again this is subject to change in
       future version of &regina;.
      </para></note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>--</option></term>
     <listitem>
      <para>
       Indicates that all other options have finished, and whatever comes
       next on the command line should be treated as the input signature.
      </para>
      <para>
       This is useful when your signature begins with a dash, to avoid
       confusing your input signature with a regular command line option.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Examples</title>

   <para>
    The following 3-manifold triangulation is non-minimal, but it requires a bit
    of work to see this:
   </para>

<screen>
    <prompt>example$</prompt> <userinput>retriangulate -h2 hLLAAkbdceefggdonxdjxn</userinput>
    hLLAAkbdceefggdonxdjxn
    hLALPkbcbefgfghxwnxark
    Found 2 triangulation(s).
    <prompt>example$</prompt> <userinput>retriangulate -h3 hLLAAkbdceefggdonxdjxn</userinput>
    hLLAAkbdceefggdonxdjxn
    hLALPkbcbefgfghxwnxark
    hLLMMkbcdfefgglcghtchj
    gLLPQcdcefffqsjpunw
    Triangulation is non-minimal!
    Smaller triangulation: gLLPQcdcefffqsjpunw
    <prompt>example$</prompt>
</screen>

   <para>
    Although the program stopped as soon as it found a smaller
    triangulation, this can be simplified even further:
   </para>

<screen>
    <prompt>example$</prompt> <userinput>retriangulate gLLPQcdcefffqsjpunw</userinput>
    gLLPQcdcefffqsjpunw
    fLAMcbbcdeedhwhxn
    Triangulation is non-minimal!
    Smaller triangulation: fLAMcbbcdeedhwhxn
    <prompt>example$</prompt>
</screen>

   <para>
    A little more probing shows this to be the cusped hyperbolic
    manifold <literal>m112</literal>:
   </para>
<screen>
    <prompt>example$</prompt> <userinput>censuslookup fLAMcbbcdeedhwhxn</userinput>
    fLAMcbbcdeedhwhxn: 1 hit
        m112 : #2 -- Cusped hyperbolic census (orientable)
    
    <prompt>example$</prompt>
</screen>
  </refsect1>

  <refsect1>
   <title>&macosx; Users</title>
   <para>
    If you downloaded a drag-and-drop app bundle, this utility is
    shipped inside it.  If you dragged &regina; to the main
    <guilabel>Applications</guilabel> folder, you can run it as
    <literal>/Applications/Regina.app/Contents/MacOS/retriangulate</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>&windows; Users</title>
   <para>
    The command-line utilities are installed beneath the
    <filename>Program&nbsp;Files</filename> directory; on some
    machines this directory is called
    <filename>Program&nbsp;Files&nbsp;(x86)</filename>.
    You can start this utility by running
    <literal>c:\Program&nbsp;Files\Regina\Regina&nbsp;&regversion;\bin\retriangulate.exe</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>See Also</title>
   <para>
    <link linkend="man-regina-gui">regina-gui</link>.
   </para>
  </refsect1>

  <refsect1>
   <title>Author</title>
   <para>
    This utility was written by Benjamin Burton
    <email>bab@maths.uq.edu.au</email>.
    &manpageack;
   </para>
  </refsect1>
 </refentry>

 <!-- Signature Census -->

 <refentry id="man-sigcensus">
  <refmeta>
   <refentrytitle>sigcensus</refentrytitle>
   <manvolnum>1</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>sigcensus</refname>
   <refpurpose>Form a census of splitting surface signatures</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <cmdsynopsis>
    <command>sigcensus</command>
    <arg choice="req"><replaceable>order</replaceable></arg>
   </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>
   <para>
    Forms a census of all splitting surface signatures of the given
    order.  The <firstterm>order</firstterm> is the number of
    quadrilaterals in the resulting splitting surface.
   </para>
   <para>
    The signatures will be written to standard output, one per
    line, followed by a count of the total number of signatures found.
   </para>
   <para>
    Each signature will be output precisely once up to equivalence.
    Signatures are considered equivalent if they are related by some
    combination of:
    <itemizedlist>
     <listitem>
      <para>relabelling symbols;</para>
     </listitem>
     <listitem>
      <para>rotating an individual cycle;</para>
     </listitem>
     <listitem>
      <para>inverting an individual cycle (i.e., reversing the cycle and
       changing the case of each symbol in the cycle);</para>
     </listitem>
     <listitem>
      <para>reversing all cycles without changing the case of any
       symbols.</para>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    Upper-case symbols in signatures are not yet supported; this
    program will only output signatures whose symbols are all lower-case.
   </para>
   <para>
    For more information on splitting surface signatures, see
    Burton's PhD thesis at &regmanburtonthesisurl;.
   </para>
  </refsect1>

  <refsect1>
   <title>&macosx; Users</title>
   <para>
    If you downloaded a drag-and-drop app bundle, this utility is
    shipped inside it.  If you dragged &regina; to the main
    <guilabel>Applications</guilabel> folder, you can run it as
    <literal>/Applications/Regina.app/Contents/MacOS/sigcensus</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>&windows; Users</title>
   <para>
    The command-line utilities are installed beneath the
    <filename>Program&nbsp;Files</filename> directory; on some
    machines this directory is called
    <filename>Program&nbsp;Files&nbsp;(x86)</filename>.
    You can start this utility by running
    <literal>c:\Program&nbsp;Files\Regina\Regina&nbsp;&regversion;\bin\sigcensus.exe</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>See Also</title>
   <para>
    <link linkend="man-censuslookup">censuslookup</link>,
    <link linkend="man-tricensus">tricensus</link>,
    <link linkend="man-regina-gui">regina-gui</link>.
   </para>
  </refsect1>

  <refsect1>
   <title>Author</title>
   <para>
    This utility was written by Benjamin Burton
    <email>bab@maths.uq.edu.au</email>.
    &manpageack;
   </para>
  </refsect1>
 </refentry>

 <!-- Triangulation Census -->

 <refentry id="man-tricensus">
  <refmeta>
   <refentrytitle>tricensus</refentrytitle>
   <manvolnum>1</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>tricensus</refname>
   <refpurpose>Form a census of triangulations</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <cmdsynopsis>
    <command>tricensus</command>
    <arg><option>-t, --tetrahedra=</option><replaceable>tetrahedra</replaceable></arg>
    <group>
     <arg><option>-2, --dim2</option></arg>
     <arg><option>-4, --dim4</option></arg>
    </group>
    <group>
     <arg><option>-b, --boundary</option></arg>
     <arg><option>-i, --internal</option></arg>
     <arg><option>-B, --bdryfaces=</option><replaceable>triangles</replaceable></arg>
    </group>
    <group>
     <arg><option>-o, --orientable</option></arg>
     <arg><option>-n, --nonorientable</option></arg>
    </group>
    <group>
     <arg><option>-f, --finite</option></arg>
     <arg><option>-d, --ideal</option></arg>
    </group>
    <group>
     <arg><option>-m, --minimal</option></arg>
     <arg><option>-M, --minprime</option></arg>
     <arg><option>-N, --minprimep2</option></arg>
     <arg><option>-h, --minhyp</option></arg>
    </group>
    <arg><option>--allowinvalid</option></arg>
    <group>
     <arg><option>-s, --sigs</option></arg>
     <arg><option>-S, --canonical</option></arg>
     <arg><option>-e, --encodings</option></arg>
     <arg><option>-c, --subcontainers</option></arg>
    </group>
    <group>
     <arg><option>-p, --genpairs</option></arg>
     <arg><option>-P, --usepairs</option></arg>
    </group>
    <arg><option>--threads=</option><replaceable>num_threads</replaceable></arg>
    <arg choice="req"><replaceable>output-file</replaceable></arg>
   </cmdsynopsis>
   <cmdsynopsis>
    <command>tricensus</command>
    <arg choice="req"><option>--help</option></arg>
   </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>
   <para>
    Forms a census of all 2-, 3- or 4-manifold triangulations that satisfy
    some set of conditions.
   </para>
   <para>
    These conditions are specified using various command-line arguments.
    The only condition that you <emphasis>must</emphasis> provide is
    the number of top-dimensional simplices (e.g., the number of tetrahedra
    for 3-manifolds), but there are many other options available.
   </para>
   <para>
    The default behaviour is to enumerate 3-manifold triangulations.
    If you wish to enumerate 2-manifold or 4-manifold triangulations instead,
    you must pass <option>--dim2</option> or <option>--dim4</option>
    respectively.
   </para>
   <para>
    Each triangulation will be output precisely once up to combinatorial
    isomorphism.  Invalid triangulations
    (for 3-manifolds, this means triangulations with edges
    identified to themselves in reverse, or vertices whose links
    have boundary but are not discs) will not be output at all.
   </para>
   <para>
    As the census progresses, the state of progress will be written (slowly)
    to standard output.  Once the census is complete, the full census will
    be saved to the given output file.
   </para>
   <para>
    You can use the options <option>--genpairs</option> and
    <option>--usepairs</option> to split a census into smaller pieces.
   </para>
   <caution>
    <para>
     A census with even a small number of top-dimensional simplices can
     take an incredibly long time to run, and can chew up massive amounts of
     memory.  It is recommended that you try very small censuses to begin
     with (such as 3 or 4 simplices), and work upwards to establish the
     limits of your machine.
    </para>
    <para>
     For very large census runs, it is <emphasis>highly recommended</emphasis>
     that you use the either the <option>--sigs</option> or
     <option>--encodings</option> option, which will keep
     the output file small and significantly reduce the memory footprint.
    </para>
   </caution>
  </refsect1>

  <refsect1>
   <title>Options</title>
   <variablelist>
    <varlistentry>
     <term><option>-t,
      --tetrahedra=</option><replaceable>tetrahedra</replaceable></term>
     <listitem>
      <para>
       Specifies the number of top-dimensional simplices used to build the
       triangulations.
       For 2-manifolds, 3-manifolds and 4-manifolds, this specifies the
       number of triangles, tetrahedra or pentachora respectively.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-2, --dim2</option></term>
     <listitem>
      <para>
       Build a census of 2-manifold triangulations, not 3-manifold
       triangulations.
      </para>
      <para>
       This is incompatible with several options; for other options it
       simply translates the relevant constraint into two dimensions.
       See each individual option for details on how it interacts with
       <option>--dim2</option>.
      </para>
      <para>
       This option cannot be used with <option>--dim4</option>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-4, --dim4</option></term>
     <listitem>
      <para>
       Build a census of 4-manifold triangulations, not 3-manifold
       triangulations.
      </para>
      <para>
       This is incompatible with several options; for other options it
       simply translates the relevant constraint into four dimensions.
       See each individual option for details on how it interacts with
       <option>--dim4</option>.
      </para>
      <para>
       This option cannot be used with <option>--dim2</option>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-b, --boundary</option></term>
     <listitem>
      <para>
       Only produce triangulations with at least one boundary triangle.
      </para>
      <para>
       For 2-manifolds or 4-manifolds, this option ensures at least one
       boundary edge or boundary tetrahedron respectively.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-i, --internal</option></term>
     <listitem>
      <para>
       Only produce triangulations with all triangles internal (i.e., with no
       boundary triangles).
      </para>
      <para>
       For 2-manifolds or 4-manifolds, this option ensures that all
       edges or tetrahedra respectively are internal.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-B,
      --bdryfaces=</option><replaceable>triangles</replaceable></term>
     <listitem>
      <para>
       Only produce triangulations with the precise number of boundary
       triangles specified.
      </para>
      <para>
       For 2-manifolds or 4-manifolds, this specifies the number of
       boundary edges or boundary tetrahedra respectively.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-o, --orientable</option></term>
     <listitem>
      <para>
       Only produce orientable triangulations.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-n, --nonorientable</option></term>
     <listitem>
      <para>
       Only produce non-orientable triangulations.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-f, --finite</option></term>
     <listitem>
      <para>
       Only produce finite triangulations (triangulations with no
       ideal vertices).
      </para>
      <para>
       This option cannot be used with <option>--dim2</option>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-d, --ideal</option></term>
     <listitem>
      <para>
       Only produce triangulations with at least one ideal vertex.
       There might or might not be internal vertices (whose links are
       spheres) as well.
      </para>
      <para>
       This option cannot be used with <option>--dim2</option>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-m, --minimal</option></term>
     <listitem>
      <para>
       Do not include triangulations that are obviously non-minimal.
      </para>
      <para>
       This option uses a series of fast tests that try to eliminate
       non-minimal triangulations, but that are not always conclusive.
       If &regina; cannot quickly tell whether a triangulation is
       non-minimal, it will place the triangulation in the census regardless.
      </para>
      <para>
       This option cannot be used with <option>--dim4</option>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-M, --minprime</option></term>
     <listitem>
      <para>
       Do not include triangulations that are obviously non-minimal,
       non-prime and/or disc-reducible.
      </para>
      <para>
       This can significantly speed up the census and vastly
       reduce the final number of triangulations produced.
      </para>
      <para>
       As above, this option uses a series of fast tests that are not
       always conclusive.
       If &regina; cannot quickly tell whether a triangulation is
       non-minimal, non-prime or disc-reducible, it will place the
       triangulation in the census regardless.
      </para>
      <para>
       This option cannot be used with <option>--dim2</option>
       or <option>--dim4</option>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-N, --minprimep2</option></term>
     <listitem>
      <para>
       Do not include triangulations that are obviously non-minimal,
       non-prime, P2-reducible and/or disc-reducible.
      </para>
      <para>
       This can significantly speed up the census and vastly
       reduce the final number of triangulations produced,
       even more so than <option>--minprime</option>.
      </para>
      <para>
       As above, this option uses a series of fast tests that are not
       always conclusive.
       If &regina; cannot quickly tell whether a triangulation is
       non-minimal, non-prime, P2-reducible or disc-reducible, it will place
       the triangulation in the census regardless.
      </para>
      <para>
       This option cannot be used with <option>--dim2</option>
       or <option>--dim4</option>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-h, --minhyp</option></term>
     <listitem>
      <para>
       Do not include triangulations that are obviously not
       minimal ideal triangulations of cusped finite-volume hyperbolic
       3-manifolds.
      </para>
      <para>
       This can significantly speed up the census and vastly
       reduce the final number of triangulations produced.
      </para>
      <para>
       As above, this option uses a series of fast tests that are not
       always conclusive.
       If &regina; cannot quickly tell whether a triangulation is a
       minimal ideal triangulation of a cusped finite-volume hyperbolic
       3-manifold,
       it will place the triangulation in the census regardless.
      </para>
      <para>
       This option is designed for use with ideal triangulations only
       (so, for instance, combining it with
       <option>--finite</option> or <option>--boundary</option>
       will produce an error message).
       This option also cannot be used with <option>--dim2</option>
       or <option>--dim4</option>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>--allowinvalid</option></term>
     <listitem>
      <para>
       Normally, <command>tricensus</command> will test each triangulation that
       is constructed for validity before including it in the final output.
       If you pass <option>--allowinvalid</option> however, then these
       validity tests will not be performed.
      </para>
      <para>
       As a result, the output may include some invalid triangulations.
       However, it will not include <emphasis>all</emphasis> invalid
       triangulations of the given size, since some invalid constructions
       are pruned at earlier levels of the search tree by the census algorithm
       (as opposed to being detected by the validity test when each full
       triangulation has been constructed).  For example, edges that are
       identified with themselves in reverse are detected and pruned earlier
       in this way, and so will never appear in the census output, even with
       the <option>--allowinvalid</option> option.
      </para>
      <para>
       The one guarantee that you <emphasis>do</emphasis> get from this option
       is that the census will include all invalid triangulations that could
       appear as a <emphasis>subcomplex</emphasis> of some valid triangulation.
       For example, if a 3-dimensional triangulation is invalid only because
       it has vertices whose links are spheres with multiple punctures,
       then it will be included in the output.
      </para>
      <para>
       This option cannot be used with finite/ideal options or minimality
       options.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-s, --sigs</option></term>
     <listitem>
      <para>
       Instead of writing a full &regina; data file, just output a list
       of isomorphism signatures.
      </para>
      <para>
       The output file will be a plain text file.  Each line will be a
       short string of letters, digits and/or punctuation that uniquely
       encodes a triangulation up to combinatorial isomorphism.
       You can import this text file from within &regina; by selecting
       &menuimportsigs; from the menu.
      </para>
      <para>
       This option is highly recommended for large census enumerations.
       First, the output file will be considerably smaller.
       More importantly, the memory footprint of
       <command>tricensus</command> will also be much smaller:
       triangulations can be written to the output file and forgotten
       immediately, instead of being kept in memory to construct a final
       &regina; data file.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-S, --canonical</option></term>
     <listitem>
      <para>
       A variant of <option>--sigs</option> that outputs a list of
       isomorphism signatures along with matching isomorphisms.
      </para>
      <para>
       The output file will be a plain text file.  Each line will
       contain two short strings, separated by a single space.
       The first string will be the same isomorphism signature that is
       output by <option>--sigs</option>.  The second string encodes an
       isomorphism <replaceable>F</replaceable> with the property that,
       if we reconstruct a triangulation from the isomorphism signature
       and apply the isomorphism <replaceable>F</replaceable>, then
       the resulting triangulation will have a canonical facet pairing.
      </para>
      <para>
       Here <firstterm>canonical</firstterm> has the same meaning as
       described below under the <option>--usepairs</option> option:
       a facet pairing is in canonical form if it is a minimal representative
       of its isomorphism class.
      </para>
      <para>
       The isomorphisms themselves will be encoded using
       <firstterm>tight encodings</firstterm>, which (like isomorphisms
       signatures) are short strings of letters, digits and/or punctuation.
       Currently you will need to use either &cpp; or &python; to decode
       these; for example, in dimension&nbsp;3 you would call
       <literal>Isomorphism&lt;3&gt;::tightDecoding()</literal>.
      </para>
      <para>
       If you do not need these isomorphisms, then you should use the
       simpler (and slightly faster) option <option>--sigs</option>
       instead.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-e, --encodings</option></term>
     <listitem>
      <para>
       Instead of writing a full &regina; data file, just output a list
       of tight encodings.
      </para>
      <para>
       The output file will be a plain text file.  Each line will be a
       short string of letters, digits and/or punctuation that uniquely
       encodes a labelled triangulation as a
       <firstterm>tight encoding</firstterm>.
      </para>
      <para>
       Tight encodings differ from isomorphism signatures (as output by
       <option>--sigs</option>) in the following ways:
       <itemizedlist>
        <listitem><para>
         The main reason for using tight encodings is that they preserve the
         labelling of simplices and their vertices (unlike isomorphism
         signatures, which only encode a triangulation up to combinatorial
         isomorphism).
        </para></listitem>
        <listitem><para>
         In general, tight encodings use slightly more characters and
         are slightly faster to compute than isomorphism signatures.
        </para></listitem>
        <listitem><para>
         Tight encodings are more difficult to work with.  They use a
         wider variety of punctuation symbols (which makes them
         inappropriate for filenames, and awkward to use as hard-coded
         strings in source code).  Moreover, at present you need to use
         either &cpp; or &python; to reconstruct triangulations from them;
         for example, in dimension&nbsp;3 you would call
         <literal>Triangulation&lt;3&gt;::tightDecoding()</literal>.
        </para></listitem>
       </itemizedlist>
       If you are not sure whether to use isomorphism signatures or
       tight encodings, it is recommended that you choose isomorphism
       signatures (<option>--sigs</option>).
      </para>
      <para>
       Like <option>--sigs</option>, this option performs much better in
       large census enumerations than saving a full &regina; data file:
       the output file will be considerably smaller, and the memory footprint
       of <command>tricensus</command> will also be much smaller.
       See the <option>--sigs</option> option for further details.
      </para>
      <para>
       You can also use <option>--encodings</option> with
       <option>--genpairs</option>, in which case the facet pairings
       will be written using tight encodings instead of human-readable
       text representations.  Tight encodings of facet pairings cannot
       be used as input with <option>--usepairs</option>, and again you
       will need to use &cpp; or &python; to reconstruct facet pairings
       from them.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-c, --subcontainers</option></term>
     <listitem>
      <para>
       For each facet pairing, a new container will be created, and
       resultant triangulations will be placed into these containers.
       These containers will be created even if the facet pairing results
       in no triangulations.
      </para>
      <para>
       See <option>--genpairs</option> below for further information on
       facet pairings.
      </para>
      <para>
       This option cannot be used with <option>--sigs</option>,
       <option>--canonical</option> or <option>--encodings</option>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-p, --genpairs</option></term>
     <listitem>
      <para>
       Only generate facet pairings, not triangulations.
       A facet pairing stores which facets of top-dimension simplices
       are glued to which others, but it does not store the precise
       rotations and/or reflections that are used for each gluing.
       For 3-manifolds a facet pairing represents a pairing of tetrahedron
       faces, for 2-manifolds it represents a pairing of triangle edges, and
       for 4-manifolds it represents a pairing of pentachoron facets.
      </para>
      <para>
       The outermost layer of the census code involves pairing off the
       facets of individual top-dimensional simplices without determining
       the corresponding gluing permutations.  For each such facet pairing
       that is produced, &regina; will try many different sets of gluing
       permutations and generated the corresponding triangulations.
      </para>
      <para>
       Facet pairing generation consumes a very small fraction of the
       total census runtime, and effectively divides the census into
       multiple pieces.  This option allows you to quickly generate
       a complete list of possible facet pairings, so that you can feed subsets
       of this list to different machines to work on simultaneously.
      </para>
      <para>
       The list of all facet pairings will be written to the given output
       file in a plain text format (though you may omit the output file from
       the command line, in which case the facet pairings will be written to
       standard output).
       By default, the output format will be a space-separated
       numerical format, suitable for use with
       <option>--usepairs</option> (see below).  However, if you pass
       <option>--encodings</option> then the output format will use
       tight encodings (which are shorter, contain no spaces, and are
       much harder for humans to read).  See <option>--encodings</option>
       for further details on tight encodings.
      </para>
      <para>
       If you are coordinating your sub-censuses manually, you can
       use the option <option>--usepairs</option> to generate triangulations
       from a subset of these facet pairings.  In this case, the facet
       pairings will need to be presented using the default
       space-separated numerical format (not tight encodings).
      </para>
      <para>
       Options for orientability, finiteness or minimality cannot be
       used with <option>--genpairs</option>; instead you should use them
       later with <option>--usepairs</option>.
      </para>
      <para>
       This option does not come with progress reporting, though
       typically it runs fast enough that this does not matter.
       You can always track the state of progress by counting lines in
       the output file.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-P, --usepairs</option></term>
     <listitem>
      <para>
       Use only the given subset of facet pairings to build the triangulations.
      </para>
      <para>
       Each facet pairing that is processed must be
       in canonical form, i.e., must be a minimal representative of its
       isomorphism class.  All facet pairings generated using
       <option>--genpairs</option> are guaranteed to satisfy this condition.
      </para>
      <para>
       Facet pairings should be supplied on standard input, one per line.
       They should be presented using the space-separated numerical format
       produced by the option <option>--genpairs</option>.
      </para>
      <para>
       This option effectively lets you run a subset of a larger census.
       See <option>--genpairs</option> for further details on how to split
       a census into subsets that can run simultaneously on different machines.
      </para>
      <para>
       Options for the number of top-dimensional simplices
       (i.e., <option>--tetrahedra</option>) or boundary facets
       (i.e., <option>--boundary</option> or <option>--bdryfaces</option>)
       cannot be used with <option>--usepairs</option>.
       Instead you should pass these options earlier
       along with <option>--genpairs</option> when you split the original
       census into pieces.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>--threads=</option><replaceable>num_threads</replaceable></term>
     <listitem>
      <para>
       Run the census in parallel using the given number of threads.
       This parallelisation is typically very effective (particularly
       for larger censuses), in that the speed-up factor is usually close to
       the theoretical maximum <replaceable>num_threads</replaceable>.
      </para>
      <para>
       The way the parallelisation currently works is as follows.
       For each individual facet pairing, the corresponding search tree
       is broken into a many smaller subtrees (i.e., subsearches), each
       of which can be processed independently by different threads.
      </para>
      <para>
       This has two consequences:
       <itemizedlist>
        <listitem><para>
         The <option>--threads</option> option cannot be used with
         <option>--genpairs</option>, since the facet pairings are still
         enumerated in serial.
        </para></listitem>
        <listitem><para>
         The output that writes each facet pairing to the console will appear
         deceptively fast.  This is because each facet pairing will be
         written as soon as it is constructed by the main thread, and its many
         subsearches will be placed in a queue for other threads to process
         while the main thread moves on to the next facet pairing.
         Once all of the pairings have been output, you may still face a
         long wait while the threads together work their way through the
         queue of subsearches that has accumulated.
        </para></listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  <refsect1>
   <title>Examples</title>

   <para>
    The following command forms a census of all 3-tetrahedron closed
    non-orientable 3-manifold triangulations, and puts the results in the file
    <filename>results.rga</filename>.  To ensure that triangulations are
    closed we use the options <option>-i</option> (no boundary triangles)
    and <option>-f</option> (no ideal vertices).
   </para>

<screen>
    <prompt>example$</prompt> <userinput>tricensus -t 3 -nif results.rga</userinput>
    Starting census generation...
    0:1 0:0 1:0 1:1 | 0:2 0:3 2:0 2:1 | 1:2 1:3 2:3 2:2
    0:1 0:0 1:0 2:0 | 0:2 1:2 1:1 2:1 | 0:3 1:3 2:3 2:2
    0:1 0:0 1:0 2:0 | 0:2 2:1 2:2 2:3 | 0:3 1:1 1:2 1:3
    1:0 1:1 2:0 2:1 | 0:0 0:1 2:2 2:3 | 0:2 0:3 1:2 1:3
    Finished.
    Total triangulations: 5
    <prompt>example$</prompt>
</screen>

   <para>
    The following command forms a census of 4-tetrahedron closed
    orientable 3-manifold triangulations, where the census creation is optimised
    for prime minimal triangulations.  Although all prime minimal
    triangulations will be included, there may be some non-prime or
    non-minimal triangulations in the census also.
   </para>

<screen>
    <prompt>example$</prompt> <userinput>tricensus -t 4 -oifM results.rga</userinput>
    Starting census generation...
    0:1 0:0 1:0 1:1 | 0:2 0:3 2:0 2:1 | 1:2 1:3 3:0 3:1 | 2:2 ...
    0:1 0:0 1:0 1:1 | 0:2 0:3 2:0 3:0 | 1:2 2:2 2:1 3:1 | 1:3 ...
    ...
    1:0 1:1 2:0 3:0 | 0:0 0:1 2:1 3:1 | 0:2 1:2 3:2 3:3 | 0:3 ...
    Finished.
    Total triangulations: 17
    <prompt>example$</prompt>
</screen>

   <para>
    The following command generates all face pairings for a
    5-tetrahedron census of 3-manifold triangulation in which all
    triangulations have precisely two
    boundary triangles.  The face pairings will be written to
    <filename>pairings.txt</filename>, whereupon they can be broken up
    and distributed for processing at a later date.
   </para>

<screen>
    <prompt>example$</prompt> <userinput>tricensus --genpairs -t 5 -B 2 pairings.txt</userinput>
    Total face pairings: 118
    <prompt>example$</prompt>
</screen>

   <para>
    The face pairings generated in the previous example can then be fleshed
    out into a full census of all 3-manifold triangulations with five
    tetrahedra, precisely two boundary triangles and no ideal vertices as
    follows.  The number of tetrahedra and boundary triangles were
    already specified in the previous command, and cannot be
    supplied here.  The face pairings will be read from
    <filename>pairings.txt</filename>, and the final census will be
    written to <filename>results.rga</filename>.
   </para>

<screen>
    <prompt>example$</prompt> <userinput>tricensus --usepairs -f results.rga &lt; pairings.txt</userinput>
    Trying face pairings...
    0:1 0:0 1:0 1:1 | 0:2 0:3 2:0 2:1 | 1:2 1:3 3:0 3:1 | 2:2 ...
    0:1 0:0 1:0 1:1 | 0:2 0:3 2:0 2:1 | 1:2 1:3 3:0 3:1 | 2:2 ...
    ...
    ... (running through all 118 face pairings)
    ...
    1:0 2:0 3:0 4:0 | 0:0 2:1 3:1 4:1 | 0:1 1:1 3:2 4:2 | 0:2 ...
    Total triangulations: 5817
    <prompt>example$</prompt>
</screen>
  </refsect1>

  <refsect1>
   <title>&macosx; Users</title>
   <para>
    If you downloaded a drag-and-drop app bundle, this utility is
    shipped inside it.  If you dragged &regina; to the main
    <guilabel>Applications</guilabel> folder, you can run it as
    <literal>/Applications/Regina.app/Contents/MacOS/tricensus</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>&windows; Users</title>
   <para>
    The command-line utilities are installed beneath the
    <filename>Program&nbsp;Files</filename> directory; on some
    machines this directory is called
    <filename>Program&nbsp;Files&nbsp;(x86)</filename>.
    You can start this utility by running
    <literal>c:\Program&nbsp;Files\Regina\Regina&nbsp;&regversion;\bin\tricensus.exe</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>See Also</title>
   <para>
    <link linkend="man-censuslookup">censuslookup</link>,
    <link linkend="man-sigcensus">sigcensus</link>,
    <link linkend="man-regina-gui">regina-gui</link>.
   </para>
  </refsect1>

  <refsect1>
   <title>Author</title>
   <para>
    This utility was written by Benjamin Burton
    <email>bab@maths.uq.edu.au</email>.
    &manpageack;
   </para>
  </refsect1>
 </refentry>

 <!-- Isomorphism Tester -->

 <refentry id="man-trisetcmp">
  <refmeta>
   <refentrytitle>trisetcmp</refentrytitle>
   <manvolnum>1</manvolnum>
  </refmeta>

  <refnamediv>
   <refname>trisetcmp</refname>
   <refpurpose>Compare triangulations between two &regina; data files</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
   <cmdsynopsis>
    <command>trisetcmp</command>
    <group>
     <arg><option>-m</option></arg>
     <arg><option>-n</option></arg>
    </group>
    <arg><option>-s</option></arg>
    <arg choice="req"><replaceable>file1</replaceable></arg>
    <arg choice="req"><replaceable>file2</replaceable></arg>
   </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1>
   <title>Description</title>
   <para>
    Compares all triangulations in the first file against
    all triangulations in the second file, looking for pairs of
    triangulations that are combinatorially isomorphic.
   </para>
   <para>
    The two given files must be &regina; data files.
    A full list of matches (or a full list of non-matches if
    <option>-n</option> is passed) is written to standard output.
    A match occurs when some triangulation from
    <replaceable>file1</replaceable> is combinatorially isomorphic to
    some triangulation from <replaceable>file2</replaceable> (i.e.,
    identical up to a relabelling of tetrahedra and their vertices).
   </para>
   <para>
    This utility can also do subcomplex testing instead of full
    isomorphism testing.  See the option <option>-s</option> for
    details.
   </para>
   <para>
    This utility compares both 3-manifold and 4-manifold triangulations
    (but no other dimensions at present).
    However, it will only compare triangulations of the same
    dimension&mdash;it will not test whether some 3-manifold triangulation
    appears as a subcomplex of some other 4-manifold triangulation.
   </para>
  </refsect1>

  <refsect1>
   <title>Options</title>
   <variablelist>
    <varlistentry>
     <term><option>-m</option> (default)</term>
     <listitem>
      <para>
       Output matches only.  All isomorphic matches between
       triangulations in <replaceable>file1</replaceable>
       and triangulations in <replaceable>file2</replaceable>
       will be listed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-n</option></term>
     <listitem>
      <para>
       Output non-matches only.  All triangulations from
       <replaceable>file1</replaceable> with no isomorphic match in
       <replaceable>file2</replaceable> will be listed, and vice versa.
      </para>
      <para>
       If <option>-s</option> is passed then non-matches are
       tested in one direction only, not both; see below for details.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>-s</option></term>
     <listitem>
      <para>
       Instead of testing triangulations for isomorphism, test whether
       one triangulation is isomorphic to a subcomplex of the other.
      </para>
      <para>
       In the default case of <option>-m</option> (output matches only),
       this program outputs all instances where a triangulation from
       <replaceable>file1</replaceable> is isomorphic to a subcomplex
       of a triangulation from <replaceable>file2</replaceable>.
      </para>
      <para>
       In the case of <option>-n</option> (output non-matches only),
       this program outputs all triangulations from
       <replaceable>file1</replaceable> that are not isomorphic to a
       subcomplex of any triangulation from <replaceable>file2</replaceable>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </refsect1>

  &submani18n;

  <refsect1>
   <title>&macosx; Users</title>
   <para>
    If you downloaded a drag-and-drop app bundle, this utility is
    shipped inside it.  If you dragged &regina; to the main
    <guilabel>Applications</guilabel> folder, you can run it as
    <literal>/Applications/Regina.app/Contents/MacOS/trisetcmp</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>&windows; Users</title>
   <para>
    The command-line utilities are installed beneath the
    <filename>Program&nbsp;Files</filename> directory; on some
    machines this directory is called
    <filename>Program&nbsp;Files&nbsp;(x86)</filename>.
    You can start this utility by running
    <literal>c:\Program&nbsp;Files\Regina\Regina&nbsp;&regversion;\bin\trisetcmp.exe</literal>.
   </para>
  </refsect1>

  <refsect1>
   <title>See Also</title>
   <para>
    <link linkend="man-censuslookup">censuslookup</link>,
    <link linkend="man-regina-gui">regina-gui</link>.
   </para>
  </refsect1>

  <refsect1>
   <title>Author</title>
   <para>
    This utility was written by Benjamin Burton
    <email>bab@maths.uq.edu.au</email>.
    &manpageack;
   </para>
  </refsect1>
 </refentry>
</appendix>
