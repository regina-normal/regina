<sect1 id="featureset">
 <title>What does Regina do?</title>

 <para>
  Some of &regina;'s more noteworthy features are listed below.
 </para>

 <sect2 id="features-tri">
  <title>3-Manifold Triangulations</title>

  <para>
   &regina;'s greatest strengths are in 3-manifold topology.
   Here, the primary objects that a user works with are
   3-manifold triangulations.  A large part of &regina; is
   devoted to the creation, analysis and manipulation of these triangulations.
  </para>

  <sect3 id="features-tricreation">
   <title>Creation</title>

   <para>
    You can create 3-manifold triangulations in the following ways:
    <itemizedlist>
     <listitem><para>
      manual construction by entering
      individual tetrahedron face gluings by hand;
     </para></listitem>
     <listitem><para>
      automatic generation of several standard families of triangulations,
      such as layered solid tori and layered lens spaces
      <xref linkend="bib-0-efficiency"/>,
      <xref linkend="bib-layeredlensspaces"/>,
      and standard constructions of &sfslong;s over the sphere;
     </para></listitem>
     <listitem><para>
      reconstruction from
      text-based isomorphism signatures
      <xref linkend="bib-burton-pachner-orprime"/>
      and Callahan-Hildebrand-Weeks
      dehydration strings <xref linkend="bib-cuspedcensus"/>;
     </para></listitem>
     <listitem><para>
      building triangulations from framed links, using the command-line
      <link linkend="man-dgt">&dgt;</link> tool;
     </para></listitem>
     <listitem><para>
      importing triangulations from &snappeapylink; (which now preserves
      fillings and peripheral curves), and also from &orburl;;
     </para></listitem>
     <listitem><para>
      automatic construction of several ready-made example triangulations.
     </para></listitem>
     </itemizedlist>
    </para>
   </sect3>

  <sect3 id="features-trianalysis">
   <title>Analysis</title>
   <para>
    You can compute the following properties of a 3-manifold triangulation:
    <itemizedlist>
     <listitem><para>
      detailed combinatorial information about the skeleton and
      boundary components, including triangulations of the vertex links
      and the shapes formed by the various triangles (2-faces)
      within the triangulation;
     </para></listitem>
     <listitem><para>
      a variety of homology and homotopy groups;
     </para></listitem>
     <listitem><para>
      the quantum invariants of Turaev and Viro
      <xref linkend="bib-turaevviro"/>;
     </para></listitem>
     <listitem><para>
      the Kawauchi-Kojima invariants of the torsion linking form
      <xref linkend="bib-kktorsionlinkingform"/>, and comments on
      where the triangulation might be embeddable;
     </para></listitem>
     <listitem><para>
      3-sphere, 3-ball, handlebody and unknot recognition,
      as well as connected sum decomposition,
      irreducibility testing and Hakenness testing;
     </para></listitem>
     <listitem><para>
      triangulation attributes relating to the existence of particular
      types of normal surface, such as 0-efficiency <xref
      linkend="bib-0-efficiency"/>
      and the existence of splitting surfaces
      (described <link linkend="features-splitting">below</link>);
     </para></listitem>
     <listitem><para>
      fast and rigorous certification of hyperbolicity (using strict
      angle structures and linear programming);
     </para></listitem>
     <listitem><para>
      a richer but non-rigorous collection of hyperbolic invariants computed
      by the &snappea; kernel;
     </para></listitem>
     <listitem><para>
      a visual representation of the face pairing graph
      <xref linkend="bib-burton-facegraphs"/>, with the help
      of &graphviz;;
     </para></listitem>
     <listitem><para>
      a tree decomposition of the face pairing graph, for use with
      fixed-parameter tractable algorithms
      <xref linkend="bib-turaevviro-fpt"/>;
     </para></listitem>
     <listitem><para>
      text-based isomorphism signatures
      <xref linkend="bib-burton-pachner-orprime"/>,
      which identify a triangulation uniquely up to combinatorial isomorphism;
     </para></listitem>
     <listitem><para>
      Callahan-Hildebrand-Weeks dehydration strings
      <xref linkend="bib-cuspedcensus"/>,
      for those triangulations that can support them.
     </para></listitem>
    </itemizedlist>
   </para>

   <para>
    Pairs of triangulations can be tested for direct isomorphism, or for
    whether one triangulation is isomorphic to a subcomplex of another.  In
    addition the software can recognise and identify a large variety of
    well-formed structures within a
    triangulation.  These include common building blocks (such as the
    layered solid tori mentioned above) as well as infinite families
    of complete triangulations such as those described by
    Burton <xref linkend="bib-burton-phd"/>, <xref linkend="bib-burton-nor7"/>,
    <xref linkend="bib-burton-satblocks"/>,
    Martelli and Petronio <xref linkend="bib-italian9"/> and
    Matveev <xref linkend="bib-matveev6"/>.  As a
    result, &regina; can frequently recognise the underlying 3-manifolds for
    well-structured triangulations that it has not previously encountered.
   </para>
  </sect3>

  <sect3 id="features-trimanipulation">
   <title>Manipulation</title>

   <para>
    You can manipulate a 3-manifold triangulation using the following tools:
    <itemizedlist>
     <listitem><para>
      elementary moves (transformations local to a small
      number of tetrahedra), such as Pachner moves and other
      transformations described in <xref linkend="bib-burton-nor7"/>;
     </para></listitem>
     <listitem><para>
      &ldquo;greedy&rdquo; simplification, which uses a fast combination
      of these elementary moves to reduce the number of
      tetrahedra as far as possible;
     </para></listitem>
     <listitem><para>
      &ldquo;exhaustive&rdquo; simplification, which involves a
      comprehensive search through the Pachner graph to find
      simplification moves that the greedy method could not;
     </para></listitem>
     <listitem><para>
      conversion to a 0-efficient triangulation where possible
      for closed orientable 3-manifolds <xref linkend="bib-0-efficiency"/>;
     </para></listitem>
     <listitem><para>
      barycentric subdivision, truncating ideal vertices
      (whose links are neither 2-spheres nor discs) to give real
      boundary components, and conversely coning real
      boundary components to give ideal vertices;
     </para></listitem>
     <listitem><para>
      conversion of a non-orientable triangulation to an orientable
      double cover;
     </para></listitem>
     <listitem><para>
      cutting along normal surfaces within a triangulation
      or crushing them to a point, as
      described <link linkend="features-surfaces">below</link>;
     </para></listitem>
     <listitem><para>
      puncturing manifolds,
      drilling out neighbourhoods of edges, and building connected sums;
     </para></listitem>
     <listitem><para>
      Dehn fillings for &snappea; triangulations (via the &snappea; kernel).
     </para></listitem>
    </itemizedlist>
   </para>
  </sect3>
 </sect2>

 <sect2 id="features-dim4">
  <title>4-Manifold Triangulations</title>
  <para>
   &regina; also offers rich support for triangulated 4-manifolds.
  </para>
  <para>
   You can create 4-manifold triangulations using similar methods to
   3-manifolds, including manual gluings of pentachora,
   automatic generation of standard families, reconstruction from
   isomorphism signatures, building from framed links,
   and constructing ready-made examples.
  </para>
  <para>
   To analyse 4-manifold triangulations, &regina; offers a similar
   suite of algebraic and combinatorial tools, including
   detailed information about the skeleton and edge/vertex links,
   various homology and homotopy groups, intersection forms,
   analysis and tree decompositions of the facet pairing graph,
   isomorphism testing, and isomorphism signatures.
  </para>
  <para>
   To manipulate 4-manifold triangulations, &regina; offers a
   similar combinatorial toolbox to that for 3-manifolds, including
   elementary moves, automated simplification, barycentric subdivision,
   double covers, and converting between ideal and real boundary components.
  </para>
 </sect2>

 <sect2 id="features-highdim">
  <title>Higher Dimensions</title>
  <para>
   Beyond 4-manifolds, &regina; offers very basic support support for
   triangulations of dimensions 5&ndash;8 (and, if you make your own
   <ulink url="https://regina-normal.github.io/buildtips.html#highdim">custom
   build</ulink>, 9&ndash;15).
   This support is <emphasis>not</emphasis> available through the &gui;:
   for this you will need to use either
   <link linkend="python">&python;</link> or
   <link linkend="compiling">&cpp;</link>.
  </para>
  <para>
   Currently this support is limited to basic combinatorial tools,
   such analysis of the skeleton and face structure of the triangulation,
   double covers, creating ideal vertices, isomorphism testing,
   and isomorphism signatures.
  </para>
  <para>
   The level of support for higher-dimensional triangulations is
   expected to grow in future releases.
  </para>
 </sect2>

 <sect2 id="features-links">
  <title>Knots and Links</title>
  <para>
   Since version&nbsp;5.96,
   &regina; now offers native support for knots and links.
  </para>
  <para>
   You can create knots and links from Gauss, Dowker-Thistlethwaite
   or planar diagram codes, knot signatures,
   parameterised families of knots and links,
   or construction of ready-made examples.
  </para>
  <para>
   &regina; computes several link invariants including the
   Jones and &homflypt; polynomials and the link group,
   allows you to build and study the
   underlying 4-valent graph and its tree decompositions, offers tools
   for isomorphism testing and isomorphism signatures, and allows you to
   build the knot/link complement as a 3-manifold triangulation.
  </para>
  <para>
   To manipulate knots and links, you can edit individual crossings,
   perform Reidemeister moves, take cablings, or run
   sophisticated simplification tools.
  </para>
 </sect2>

 <sect2 id="features-census">
  <title>Census Creation and Lookup</title>
  <para>
   &regina; can be used to form censuses of all triangulations
   that satisfy various constraints, through the command-line tool
   <link linkend="man-tricensus"><command>tricensus</command></link>.
   Census enumeration is currently available for triangulations
   in dimensions 2, 3 and 4.
  </para>
  <para>
   The census algorithms are heavily optimised; see
   <xref linkend="bib-burton-facegraphs"/>,
   <xref linkend="bib-burton-nor10"/> and
   <xref linkend="bib-burton-genus"/> for details.
  </para>
  <para>
   &regina; ships with several
   census databases, including closed 3-manifold triangulations
   <xref linkend="bib-burton-nor8"/>, <xref linkend="bib-burton-nor10"/>,
   <xref linkend="bib-burton-genus"/>, hyperbolic 3-manifolds
   <xref linkend="bib-burton-complete"/>,
   <xref linkend="bib-cuspedcensus"/>, <xref linkend="bib-closedhypcensus"/>,
   and knots and links <xref linkend="bib-burton-knots"/>.
  </para>
  <para>
   &regina; can also search for a given triangulation across these databases
   (and indeed across much larger extensions of these databases),
   using isomorphism signatures <xref linkend="bib-burton-pachner-orprime"/>,
   and fast hashing techniques.
  </para>
 </sect2>

 <sect2 id="features-surfaces">
  <title>Normal Surfaces and Hypersurfaces</title>
  <para>
   &regina; is capable of enumerating all vertex or fundamental
   normal surfaces within a 3-manifold triangulation, or all
   vertex or fundamental normal hypersurfaces within a 4-manifold
   triangulation.  For 3-manifolds, almost normal
   surfaces<footnote><para>Almost normal surfaces are closely related
     to normal surfaces and are used by Rubinstein in his 3-sphere recognition
     algorithm <xref linkend="bib-rubin-3sphere1"/>,
     <xref linkend="bib-rubin-3sphere2"/>.  &regina; only considers octagonal
     almost normal discs, and does not consider annular
     pieces.</para></footnote>
   are supported also.
  </para>
  <para>
   These operations&mdash;enumerating vertex and fundamental normal
   surfaces&mdash;are required by many high-level topological algorithms
   for 3-manifolds.  The underlying enumeration algorithms
   are highly optimised, and are described in detail in
   <xref linkend="bib-burton-dd"/>,
   <xref linkend="bib-burton-convert"/>,
   <xref linkend="bib-burton-quadoct"/>,
   <xref linkend="bib-burton-fund"/>, and
   <xref linkend="bib-bo-tree"/>.
  </para>
  <para>
   For 3-manifolds, this enumeration can be performed in a variety of coordinate
   systems.  For an <replaceable>n</replaceable>-tetrahedron triangulation
   this includes the 7<replaceable>n</replaceable>
   standard triangle and quadrilateral coordinates, as well
   as the smaller set of 3<replaceable>n</replaceable> quadrilateral-only
   coordinates <xref linkend="bib-quadspace"/>.
   Likewise, for almost normal surfaces
   this includes the 10<replaceable>n</replaceable> standard coordinates
   as well as the 6<replaceable>n</replaceable> quadrilateral-octagon
   coordinates <xref linkend="bib-burton-quadoct"/>.
  </para>
  <para>
   The enumeration
   can be restricted to embedded normal surfaces/hypersurfaces,
   or can be expanded to
   include immersed and singular surfaces/hypersurfaces.
   &regina; also supports
   spun-normal surfaces <xref linkend="bib-tillus-spun"/>,
   which are non-compact surfaces with infinitely many
   discs found in ideal 3-manifold triangulations.
  </para>
  <para>
   To analyse normal surfaces within a 3-manifold triangulation, you can:
   <itemizedlist>
    <listitem><para>
     view normal surfaces in a variety of coordinate systems,
     including the standard and quadrilateral-only coordinates
     discussed above as well as the edge weight coordinates introduced by
     Casson;
    </para></listitem>
    <listitem><para>
     calculate basic properties of normal surfaces such as
     Euler characteristic, orientability and one-sidedness;
    </para></listitem>
    <listitem><para>
     test surfaces for incompressibility, using both exact techniques
     <xref linkend="bib-jaco-oertel"/> and
     fast heuristics <xref linkend="bib-weber-seifert"/>;
    </para></listitem>
    <listitem><para>
     cut along a normal surface and retriangulate, or crush the surface
     using the techniques of Jaco and Rubinstein
     <xref linkend="bib-0-efficiency"/>;
    </para></listitem>
    <listitem><para>
     recognise standard surfaces within a triangulation such
     as splitting surfaces (described
     <link linkend="features-splitting">below</link>)
     and thin or normalised vertex, edge and triangle links;
    </para></listitem>
    <listitem><para>
     test pairs of surfaces for local compatibility (compatible
     quadrilaterals and/or octagons) and global compatibility (being
     able to make the surfaces disjoint);
    </para></listitem>
    <listitem><para>
     filter large lists of normal surfaces by various properties
     such as Euler characteristic, orientability and boundary.
    </para></listitem>
   </itemizedlist>
  </para>
  <para>
   For normal hypersurfaces in a 4-manifold triangulation, some
   analogous operations are available.  In particular, you can view
   hypersurfaces in different coordinate systems, calculate basic
   properties, and test for local (but not yet global) compatibility.
  </para>
 </sect2>

 <sect2 id="features-angles">
  <title>Angle Structures</title>
  <para>
   Angle structures, studied originally by Casson and then developed by
   Lackenby <xref linkend="bib-lackenby-taut"/>,
   <xref linkend="bib-lackenby-anglestruct"/> and
   Rivin <xref linkend="bib-rivin-structures"/>,
   <xref linkend="bib-rivin-combopt"/>,
   represent a purely
   algebraic generalisation of hyperbolic structures.  An angle structure
   on an ideal 3-manifold triangulation is formed by assigning an interior
   dihedral angle to each edge of every tetrahedron in such a way that
   a variety of linear equations and inequalities are satisfied.
  </para>
  <para>
   Using similar techniques to normal surface enumeration,
   &regina; can enumerate all vertex angle structures in a triangulation,
   or all taut structures (for which each dihedral angle is precisely 0
   or &pi;).
   &regina; can also identify veering structures, which are taut
   structures that induce a specific type of combinatorial structure on
   the underlying triangulation
   <xref linkend="bib-agol-ideal"/>, <xref linkend="bib-hodgson-veering"/>.
  </para>
  <para>
   For <firstterm>strict</firstterm> angle structures (in which all angles
   are strictly positive) or <firstterm>generalised</firstterm> angle
   structures (where negative angles are allowed),
   &regina; can test for existence very quickly and find an explicit example
   if one exists, using techniques from linear programming and linear algebra.
  </para>
 </sect2>

 <sect2 id="features-splitting">
  <title>Splitting Surfaces</title>
  <para>
   A splitting surface within a 3-manifold triangulation
   contains precisely one quadrilateral disc within
   each tetrahedron and no other normal or almost normal discs.
   These surfaces have some interesting combinatorial and topological
   properties, described in detail in <xref linkend="bib-burton-phd"/>.
  </para>
  <para>
   &regina; can detect whether splitting surfaces
   occur within a triangulation.  It also provides support for
   splitting surface signatures, which are compact text-based representations
   from which splitting surfaces and their enclosing 3-manifold
   triangulations can be reconstructed.  In addition, &regina; can generate a
   census of all possible splitting surface signatures of a given size.
  </para>
 </sect2>

 <sect2 id="features-scripting">
  <title>Scripting</title>
  <para>
   Users can interact with &regina; at a lower level by writing and
   running scripts in <ulink url="http://www.python.org/">&python;</ulink>.
   These scripts are essentially high-level programs with immediate access
   to the mathematical core of &regina;, and are ideal for
   performing repetitive tasks over large sets of data.  Such tasks might
   include performing a sequence of tests upon all triangulations in a
   census, or testing a prototype for a new algorithm.
   Scripts can be embedded in &regina; data files or run from the
   command line, and custom libraries of
   routines can be written to share code between files.
  </para>
  <para>
   On many systems, default installations of &regina; and &snappy; can
   communicate with each other inside the same &python; session.
   See the <link linkend="python-snappy">&python; chapter</link>
   for details.
  </para>
  <para>
   If you build &regina; from source, you have the option of
   working with either &python;&nbsp;2 or &python;&nbsp;3.
   (If you download a ready-made package, then the package maintainer
   will have made this choice for you.)
  </para>
 </sect2>

 <sect2 id="features-interfaces">
  <title>Interfaces</title>
  <para>
   The usual method of running &regina; is through a full
   point-and-click graphical user interface.
   Alternatively, for those requiring immediate access to the
   mathematical core of the software, an interactive command-line interface
   is available for users to control the program using
   &python; scripting as described above.
   Various other specialised command-line utility programs are also available.
  </para>
  <para>
   The mathematical core of &regina; is provided as a &cpp; library,
   which means that programmers are able to access its low-level mathematical
   routines directly from within their own code.
  </para>
 </sect2>

 <sect2 id="features-docs">
  <title>Documentation</title>
  <para>
   Significant effort has been spent on documentation for this software.
   A full users' handbook is available for &regina; (which you are reading now).
   In addition, the graphical user interface offers extensive assistance
   through tooltips and &quot;What's This?&quot; texts.  Just hit
   <keycombo action="simul">&Shift;<keycap>F1</keycap></keycombo>
   and click on any element of the user interface for immediate assistance.
  </para>
  <para>
   For users writing &python; scripts or for &cpp; programmers seeking to
   modify or extend the software, the full &api; for &regina;'s
   mathematical engine is also extensively documented.
   You can access the &api; documentation by selecting
   <menuchoice>
    <guimenu>Help</guimenu>
    <guimenuitem>Python API Reference</guimenuitem>
   </menuchoice>.
  </para>
 </sect2>

 <sect2 id="features-datafiles">
  <title>Data Files</title>
  <para>
   &regina; stores data in a well-organised hierarchical structure,
   allowing a single data file to contain
   multiple triangulations, normal surface lists and other topological
   structures, along with supporting data such as text notes,
   &python; scripts and &pdf; documents.
   The file format is based on
   compressed &xml;, an open and widely-supported text-based data
   format.  International characters are fully supported.
  </para>
  <para id="dataformat">
   Again, this &xml; file format is extensively documented.
   For details, select
   <menuchoice>
    <guimenu>Help</guimenu>
    <guimenuitem>File Format Reference</guimenuitem>
   </menuchoice>.
  </para>
 </sect2>
</sect1>
