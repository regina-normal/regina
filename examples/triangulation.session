example$ regina-python
Regina 7.0
Software for low-dimensional topology
Copyright (c) 1999-2021, The Regina development team
>>> ################################
>>> #
>>> #  Sample Python Script
>>> #
>>> #  Illustrates different queries and actions on a 3-manifold triangulation
>>> #  and its normal surfaces.
>>> #
>>> #  See the file "triangulation.session" for the results of running this
>>> #  script.
>>> #
>>> ################################
>>>
>>> # Create a new (3,4,7) layered solid torus.  This is a 3-tetrahedron
>>> # triangulation of a solid torus.
>>> t = Example3.lst(3, 4)
>>> print(t)
Bounded orientable 3-D triangulation, f = ( 1 5 7 3 )
>>>
>>> # Print the full skeleton of the triangulation.
>>> print(t.detail())
Size of the skeleton:
  Tetrahedra: 3
  Triangles: 7
  Edges: 5
  Vertices: 1

Tetrahedron gluing:
  Tet  |  glued to:      (012)      (013)      (023)      (123)
  -----+-------------------------------------------------------
    0  |              boundary   boundary    1 (012)    1 (130)
    1  |               0 (023)    0 (312)    2 (013)    2 (120)
    2  |               1 (312)    1 (023)    2 (312)    2 (230)

Vertices:
  Tet  |  vertex:    0   1   2   3
  -----+--------------------------
    0  |             0   0   0   0
    1  |             0   0   0   0
    2  |             0   0   0   0

Edges:
  Tet  |  edge:   01  02  03  12  13  23
  -----+--------------------------------
    0  |           0   1   2   2   1   3
    1  |           1   2   3   3   2   4
    2  |           2   4   3   3   4   3

Triangles:
  Tet  |  face:  012 013 023 123
  -----+------------------------
    0  |           0   1   2   3
    1  |           2   3   4   5
    2  |           5   4   6   6


>>>
>>> # Calculate some algebraic properties of the triangulation.
>>> print(t.homology())
Z
>>> print(t.homologyBdry())
2 Z
>>>
>>> # Test for 0-efficiency, which asks Regina to search for certain types
>>> # of normal surfaces.
>>> print(t.isZeroEfficient())
False
>>>
>>> # Make our own list of vertex normal surfaces in standard coordinates.
>>> surfaces = NormalSurfaces(t, NS_STANDARD)
>>>
>>> # Print the full list of vertex normal surfaces.
>>> print(surfaces.detail())
Embedded, vertex surfaces
Coordinates: Standard normal (tri-quad)
Number of surfaces is 9
1 1 1 1 ; 0 0 0 || 1 1 0 0 ; 1 0 0 || 0 0 0 0 ; 0 2 0
0 0 1 1 ; 1 0 0 || 1 1 1 1 ; 0 0 0 || 1 1 1 1 ; 0 0 0
0 0 0 0 ; 0 2 0 || 0 0 1 1 ; 1 0 0 || 1 1 1 1 ; 0 0 0
0 0 0 0 ; 0 0 2 || 0 0 0 0 ; 0 2 0 || 0 0 1 1 ; 1 0 0
1 1 0 0 ; 0 0 1 || 1 1 0 0 ; 0 0 0 || 0 0 0 0 ; 0 1 0
3 3 0 0 ; 0 0 1 || 1 1 0 0 ; 0 0 2 || 1 1 0 0 ; 0 0 1
0 0 1 1 ; 1 0 0 || 1 1 0 0 ; 1 0 0 || 0 0 0 0 ; 0 2 0
0 0 0 0 ; 0 1 0 || 0 0 0 0 ; 1 0 0 || 0 0 0 0 ; 0 1 0
1 1 1 1 ; 0 0 0 || 1 1 1 1 ; 0 0 0 || 1 1 1 1 ; 0 0 0

>>>
>>> # Print the Euler characteristic and orientability of each surface.
>>> for s in surfaces:
...     print("Chi =", s.eulerChar(), "; Or =", s.isOrientable())
...
Chi = -1 ; Or = True
Chi = 0 ; Or = True
Chi = 0 ; Or = True
Chi = 0 ; Or = True
Chi = 0 ; Or = False
Chi = 1 ; Or = True
Chi = -2 ; Or = True
Chi = -1 ; Or = False
Chi = 1 ; Or = True
>>>
>>> # List all surfaces with more than one quad in the first tetrahedron.
>>> for s in surfaces:
...     if s.quads(0,0) + s.quads(0,1) + s.quads(0,2) > 1:
...         print(s)
...
0 0 0 0 ; 0 2 0 || 0 0 1 1 ; 1 0 0 || 1 1 1 1 ; 0 0 0
0 0 0 0 ; 0 0 2 || 0 0 0 0 ; 0 2 0 || 0 0 1 1 ; 1 0 0
>>>
